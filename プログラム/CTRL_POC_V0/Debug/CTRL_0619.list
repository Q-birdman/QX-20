
CTRL_0619.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003740  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080038c8  080038c8  000138c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003918  08003918  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08003918  08003918  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003918  08003918  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003918  08003918  00013918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000020  08003940  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  08003940  00020058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bf8  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002631  00000000  00000000  00030c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e8  00000000  00000000  00033280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007e0  00000000  00000000  00033b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ad90  00000000  00000000  00034348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000acaf  00000000  00000000  0004f0d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089ef9  00000000  00000000  00059d87  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3c80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000226c  00000000  00000000  000e3cfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080038b0 	.word	0x080038b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	080038b0 	.word	0x080038b0

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 f90d 	bl	80003f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f003 fa62 	bl	80036ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f917 	bl	8000446 <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295
 8000230:	f000 f8ed 	bl	800040e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	2000001c 	.word	0x2000001c
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	20000054 	.word	0x20000054

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000054 	.word	0x20000054

08000294 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f003 0307 	and.w	r3, r3, #7
 80002a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <NVIC_SetPriorityGrouping+0x44>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002aa:	68ba      	ldr	r2, [r7, #8]
 80002ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002b0:	4013      	ands	r3, r2
 80002b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002c6:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <NVIC_SetPriorityGrouping+0x44>)
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	60d3      	str	r3, [r2, #12]
}
 80002cc:	bf00      	nop
 80002ce:	3714      	adds	r7, #20
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	e000ed00 	.word	0xe000ed00

080002dc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <NVIC_GetPriorityGrouping+0x18>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	0a1b      	lsrs	r3, r3, #8
 80002e6:	f003 0307 	and.w	r3, r3, #7
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	6039      	str	r1, [r7, #0]
 8000302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000308:	2b00      	cmp	r3, #0
 800030a:	da0b      	bge.n	8000324 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	b2da      	uxtb	r2, r3
 8000310:	490c      	ldr	r1, [pc, #48]	; (8000344 <NVIC_SetPriority+0x4c>)
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	f003 030f 	and.w	r3, r3, #15
 8000318:	3b04      	subs	r3, #4
 800031a:	0112      	lsls	r2, r2, #4
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	440b      	add	r3, r1
 8000320:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000322:	e009      	b.n	8000338 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	b2da      	uxtb	r2, r3
 8000328:	4907      	ldr	r1, [pc, #28]	; (8000348 <NVIC_SetPriority+0x50>)
 800032a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032e:	0112      	lsls	r2, r2, #4
 8000330:	b2d2      	uxtb	r2, r2
 8000332:	440b      	add	r3, r1
 8000334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	e000ed00 	.word	0xe000ed00
 8000348:	e000e100 	.word	0xe000e100

0800034c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800034c:	b480      	push	{r7}
 800034e:	b089      	sub	sp, #36	; 0x24
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	f003 0307 	and.w	r3, r3, #7
 800035e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000360:	69fb      	ldr	r3, [r7, #28]
 8000362:	f1c3 0307 	rsb	r3, r3, #7
 8000366:	2b04      	cmp	r3, #4
 8000368:	bf28      	it	cs
 800036a:	2304      	movcs	r3, #4
 800036c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3304      	adds	r3, #4
 8000372:	2b06      	cmp	r3, #6
 8000374:	d902      	bls.n	800037c <NVIC_EncodePriority+0x30>
 8000376:	69fb      	ldr	r3, [r7, #28]
 8000378:	3b03      	subs	r3, #3
 800037a:	e000      	b.n	800037e <NVIC_EncodePriority+0x32>
 800037c:	2300      	movs	r3, #0
 800037e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000380:	f04f 32ff 	mov.w	r2, #4294967295
 8000384:	69bb      	ldr	r3, [r7, #24]
 8000386:	fa02 f303 	lsl.w	r3, r2, r3
 800038a:	43da      	mvns	r2, r3
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	401a      	ands	r2, r3
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000394:	f04f 31ff 	mov.w	r1, #4294967295
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	fa01 f303 	lsl.w	r3, r1, r3
 800039e:	43d9      	mvns	r1, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a4:	4313      	orrs	r3, r2
         );
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3724      	adds	r7, #36	; 0x24
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
	...

080003b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3b01      	subs	r3, #1
 80003c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003c4:	d301      	bcc.n	80003ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003c6:	2301      	movs	r3, #1
 80003c8:	e00f      	b.n	80003ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ca:	4a0a      	ldr	r2, [pc, #40]	; (80003f4 <SysTick_Config+0x40>)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003d2:	210f      	movs	r1, #15
 80003d4:	f04f 30ff 	mov.w	r0, #4294967295
 80003d8:	f7ff ff8e 	bl	80002f8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003dc:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <SysTick_Config+0x40>)
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003e2:	4b04      	ldr	r3, [pc, #16]	; (80003f4 <SysTick_Config+0x40>)
 80003e4:	2207      	movs	r2, #7
 80003e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003e8:	2300      	movs	r3, #0
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	e000e010 	.word	0xe000e010

080003f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000400:	6878      	ldr	r0, [r7, #4]
 8000402:	f7ff ff47 	bl	8000294 <NVIC_SetPriorityGrouping>
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}

0800040e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	b086      	sub	sp, #24
 8000412:	af00      	add	r7, sp, #0
 8000414:	4603      	mov	r3, r0
 8000416:	60b9      	str	r1, [r7, #8]
 8000418:	607a      	str	r2, [r7, #4]
 800041a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000420:	f7ff ff5c 	bl	80002dc <NVIC_GetPriorityGrouping>
 8000424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	68b9      	ldr	r1, [r7, #8]
 800042a:	6978      	ldr	r0, [r7, #20]
 800042c:	f7ff ff8e 	bl	800034c <NVIC_EncodePriority>
 8000430:	4602      	mov	r2, r0
 8000432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000436:	4611      	mov	r1, r2
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ff5d 	bl	80002f8 <NVIC_SetPriority>
}
 800043e:	bf00      	nop
 8000440:	3718      	adds	r7, #24
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}

08000446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000446:	b580      	push	{r7, lr}
 8000448:	b082      	sub	sp, #8
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f7ff ffb0 	bl	80003b4 <SysTick_Config>
 8000454:	4603      	mov	r3, r0
}
 8000456:	4618      	mov	r0, r3
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
	...

08000460 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000466:	af00      	add	r7, sp, #0
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d102      	bne.n	800047a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000474:	2301      	movs	r3, #1
 8000476:	f000 beda 	b.w	800122e <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	f003 0301 	and.w	r3, r3, #1
 8000484:	2b00      	cmp	r3, #0
 8000486:	f000 816e 	beq.w	8000766 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800048a:	4bb5      	ldr	r3, [pc, #724]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	f003 030c 	and.w	r3, r3, #12
 8000492:	2b04      	cmp	r3, #4
 8000494:	d00c      	beq.n	80004b0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000496:	4bb2      	ldr	r3, [pc, #712]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	f003 030c 	and.w	r3, r3, #12
 800049e:	2b08      	cmp	r3, #8
 80004a0:	d15a      	bne.n	8000558 <HAL_RCC_OscConfig+0xf8>
 80004a2:	4baf      	ldr	r3, [pc, #700]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004ae:	d153      	bne.n	8000558 <HAL_RCC_OscConfig+0xf8>
 80004b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004b4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004b8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80004bc:	fa93 f3a3 	rbit	r3, r3
 80004c0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80004c4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004c8:	fab3 f383 	clz	r3, r3
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	095b      	lsrs	r3, r3, #5
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	f043 0301 	orr.w	r3, r3, #1
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d102      	bne.n	80004e2 <HAL_RCC_OscConfig+0x82>
 80004dc:	4ba0      	ldr	r3, [pc, #640]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	e015      	b.n	800050e <HAL_RCC_OscConfig+0xae>
 80004e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004e6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004ea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80004ee:	fa93 f3a3 	rbit	r3, r3
 80004f2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80004f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004fa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80004fe:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000502:	fa93 f3a3 	rbit	r3, r3
 8000506:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800050a:	4b95      	ldr	r3, [pc, #596]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 800050c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800050e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000512:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000516:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800051a:	fa92 f2a2 	rbit	r2, r2
 800051e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8000522:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000526:	fab2 f282 	clz	r2, r2
 800052a:	b252      	sxtb	r2, r2
 800052c:	f042 0220 	orr.w	r2, r2, #32
 8000530:	b252      	sxtb	r2, r2
 8000532:	b2d2      	uxtb	r2, r2
 8000534:	f002 021f 	and.w	r2, r2, #31
 8000538:	2101      	movs	r1, #1
 800053a:	fa01 f202 	lsl.w	r2, r1, r2
 800053e:	4013      	ands	r3, r2
 8000540:	2b00      	cmp	r3, #0
 8000542:	f000 810f 	beq.w	8000764 <HAL_RCC_OscConfig+0x304>
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	2b00      	cmp	r3, #0
 800054e:	f040 8109 	bne.w	8000764 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8000552:	2301      	movs	r3, #1
 8000554:	f000 be6b 	b.w	800122e <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000562:	d106      	bne.n	8000572 <HAL_RCC_OscConfig+0x112>
 8000564:	4b7e      	ldr	r3, [pc, #504]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a7d      	ldr	r2, [pc, #500]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 800056a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	e030      	b.n	80005d4 <HAL_RCC_OscConfig+0x174>
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d10c      	bne.n	8000596 <HAL_RCC_OscConfig+0x136>
 800057c:	4b78      	ldr	r3, [pc, #480]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a77      	ldr	r2, [pc, #476]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 8000582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b75      	ldr	r3, [pc, #468]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a74      	ldr	r2, [pc, #464]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 800058e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	e01e      	b.n	80005d4 <HAL_RCC_OscConfig+0x174>
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005a0:	d10c      	bne.n	80005bc <HAL_RCC_OscConfig+0x15c>
 80005a2:	4b6f      	ldr	r3, [pc, #444]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a6e      	ldr	r2, [pc, #440]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 80005a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005ac:	6013      	str	r3, [r2, #0]
 80005ae:	4b6c      	ldr	r3, [pc, #432]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a6b      	ldr	r2, [pc, #428]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 80005b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005b8:	6013      	str	r3, [r2, #0]
 80005ba:	e00b      	b.n	80005d4 <HAL_RCC_OscConfig+0x174>
 80005bc:	4b68      	ldr	r3, [pc, #416]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a67      	ldr	r2, [pc, #412]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 80005c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b65      	ldr	r3, [pc, #404]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a64      	ldr	r2, [pc, #400]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 80005ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005d2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80005d4:	4b62      	ldr	r3, [pc, #392]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 80005d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005d8:	f023 020f 	bic.w	r2, r3, #15
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	495f      	ldr	r1, [pc, #380]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 80005e4:	4313      	orrs	r3, r2
 80005e6:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d05a      	beq.n	80006a8 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80005f2:	f7ff fe43 	bl	800027c <HAL_GetTick>
 80005f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005fa:	e00a      	b.n	8000612 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005fc:	f7ff fe3e 	bl	800027c <HAL_GetTick>
 8000600:	4602      	mov	r2, r0
 8000602:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000606:	1ad3      	subs	r3, r2, r3
 8000608:	2b64      	cmp	r3, #100	; 0x64
 800060a:	d902      	bls.n	8000612 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 800060c:	2303      	movs	r3, #3
 800060e:	f000 be0e 	b.w	800122e <HAL_RCC_OscConfig+0xdce>
 8000612:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000616:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800061a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800061e:	fa93 f3a3 	rbit	r3, r3
 8000622:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000626:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800062a:	fab3 f383 	clz	r3, r3
 800062e:	b2db      	uxtb	r3, r3
 8000630:	095b      	lsrs	r3, r3, #5
 8000632:	b2db      	uxtb	r3, r3
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	2b01      	cmp	r3, #1
 800063c:	d102      	bne.n	8000644 <HAL_RCC_OscConfig+0x1e4>
 800063e:	4b48      	ldr	r3, [pc, #288]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	e015      	b.n	8000670 <HAL_RCC_OscConfig+0x210>
 8000644:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000648:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800064c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000650:	fa93 f3a3 	rbit	r3, r3
 8000654:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000658:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800065c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000660:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000664:	fa93 f3a3 	rbit	r3, r3
 8000668:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800066c:	4b3c      	ldr	r3, [pc, #240]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 800066e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000670:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000674:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000678:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800067c:	fa92 f2a2 	rbit	r2, r2
 8000680:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000684:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000688:	fab2 f282 	clz	r2, r2
 800068c:	b252      	sxtb	r2, r2
 800068e:	f042 0220 	orr.w	r2, r2, #32
 8000692:	b252      	sxtb	r2, r2
 8000694:	b2d2      	uxtb	r2, r2
 8000696:	f002 021f 	and.w	r2, r2, #31
 800069a:	2101      	movs	r1, #1
 800069c:	fa01 f202 	lsl.w	r2, r1, r2
 80006a0:	4013      	ands	r3, r2
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d0aa      	beq.n	80005fc <HAL_RCC_OscConfig+0x19c>
 80006a6:	e05e      	b.n	8000766 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006a8:	f7ff fde8 	bl	800027c <HAL_GetTick>
 80006ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006b0:	e00a      	b.n	80006c8 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006b2:	f7ff fde3 	bl	800027c <HAL_GetTick>
 80006b6:	4602      	mov	r2, r0
 80006b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	2b64      	cmp	r3, #100	; 0x64
 80006c0:	d902      	bls.n	80006c8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80006c2:	2303      	movs	r3, #3
 80006c4:	f000 bdb3 	b.w	800122e <HAL_RCC_OscConfig+0xdce>
 80006c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006cc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80006d4:	fa93 f3a3 	rbit	r3, r3
 80006d8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 80006dc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006e0:	fab3 f383 	clz	r3, r3
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	095b      	lsrs	r3, r3, #5
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f043 0301 	orr.w	r3, r3, #1
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d102      	bne.n	80006fa <HAL_RCC_OscConfig+0x29a>
 80006f4:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	e015      	b.n	8000726 <HAL_RCC_OscConfig+0x2c6>
 80006fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006fe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000702:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000706:	fa93 f3a3 	rbit	r3, r3
 800070a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800070e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000712:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000716:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800071a:	fa93 f3a3 	rbit	r3, r3
 800071e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <HAL_RCC_OscConfig+0x300>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000726:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800072a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800072e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000732:	fa92 f2a2 	rbit	r2, r2
 8000736:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 800073a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800073e:	fab2 f282 	clz	r2, r2
 8000742:	b252      	sxtb	r2, r2
 8000744:	f042 0220 	orr.w	r2, r2, #32
 8000748:	b252      	sxtb	r2, r2
 800074a:	b2d2      	uxtb	r2, r2
 800074c:	f002 021f 	and.w	r2, r2, #31
 8000750:	2101      	movs	r1, #1
 8000752:	fa01 f202 	lsl.w	r2, r1, r2
 8000756:	4013      	ands	r3, r2
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1aa      	bne.n	80006b2 <HAL_RCC_OscConfig+0x252>
 800075c:	e003      	b.n	8000766 <HAL_RCC_OscConfig+0x306>
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f003 0302 	and.w	r3, r3, #2
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 8170 	beq.w	8000a56 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000776:	4bd0      	ldr	r3, [pc, #832]	; (8000ab8 <HAL_RCC_OscConfig+0x658>)
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	f003 030c 	and.w	r3, r3, #12
 800077e:	2b00      	cmp	r3, #0
 8000780:	d00b      	beq.n	800079a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000782:	4bcd      	ldr	r3, [pc, #820]	; (8000ab8 <HAL_RCC_OscConfig+0x658>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	f003 030c 	and.w	r3, r3, #12
 800078a:	2b08      	cmp	r3, #8
 800078c:	d16d      	bne.n	800086a <HAL_RCC_OscConfig+0x40a>
 800078e:	4bca      	ldr	r3, [pc, #808]	; (8000ab8 <HAL_RCC_OscConfig+0x658>)
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000796:	2b00      	cmp	r3, #0
 8000798:	d167      	bne.n	800086a <HAL_RCC_OscConfig+0x40a>
 800079a:	2302      	movs	r3, #2
 800079c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007a0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80007a4:	fa93 f3a3 	rbit	r3, r3
 80007a8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 80007ac:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007b0:	fab3 f383 	clz	r3, r3
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	095b      	lsrs	r3, r3, #5
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d102      	bne.n	80007ca <HAL_RCC_OscConfig+0x36a>
 80007c4:	4bbc      	ldr	r3, [pc, #752]	; (8000ab8 <HAL_RCC_OscConfig+0x658>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	e013      	b.n	80007f2 <HAL_RCC_OscConfig+0x392>
 80007ca:	2302      	movs	r3, #2
 80007cc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007d0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80007d4:	fa93 f3a3 	rbit	r3, r3
 80007d8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80007dc:	2302      	movs	r3, #2
 80007de:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80007e2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80007e6:	fa93 f3a3 	rbit	r3, r3
 80007ea:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80007ee:	4bb2      	ldr	r3, [pc, #712]	; (8000ab8 <HAL_RCC_OscConfig+0x658>)
 80007f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f2:	2202      	movs	r2, #2
 80007f4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80007f8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80007fc:	fa92 f2a2 	rbit	r2, r2
 8000800:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000804:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000808:	fab2 f282 	clz	r2, r2
 800080c:	b252      	sxtb	r2, r2
 800080e:	f042 0220 	orr.w	r2, r2, #32
 8000812:	b252      	sxtb	r2, r2
 8000814:	b2d2      	uxtb	r2, r2
 8000816:	f002 021f 	and.w	r2, r2, #31
 800081a:	2101      	movs	r1, #1
 800081c:	fa01 f202 	lsl.w	r2, r1, r2
 8000820:	4013      	ands	r3, r2
 8000822:	2b00      	cmp	r3, #0
 8000824:	d007      	beq.n	8000836 <HAL_RCC_OscConfig+0x3d6>
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	691b      	ldr	r3, [r3, #16]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d002      	beq.n	8000836 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000830:	2301      	movs	r3, #1
 8000832:	f000 bcfc 	b.w	800122e <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000836:	4ba0      	ldr	r3, [pc, #640]	; (8000ab8 <HAL_RCC_OscConfig+0x658>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	6959      	ldr	r1, [r3, #20]
 8000844:	23f8      	movs	r3, #248	; 0xf8
 8000846:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800084a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800084e:	fa93 f3a3 	rbit	r3, r3
 8000852:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000856:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800085a:	fab3 f383 	clz	r3, r3
 800085e:	fa01 f303 	lsl.w	r3, r1, r3
 8000862:	4995      	ldr	r1, [pc, #596]	; (8000ab8 <HAL_RCC_OscConfig+0x658>)
 8000864:	4313      	orrs	r3, r2
 8000866:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000868:	e0f5      	b.n	8000a56 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	691b      	ldr	r3, [r3, #16]
 8000870:	2b00      	cmp	r3, #0
 8000872:	f000 8085 	beq.w	8000980 <HAL_RCC_OscConfig+0x520>
 8000876:	2301      	movs	r3, #1
 8000878:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800087c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000880:	fa93 f3a3 	rbit	r3, r3
 8000884:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000888:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800088c:	fab3 f383 	clz	r3, r3
 8000890:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000894:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	461a      	mov	r2, r3
 800089c:	2301      	movs	r3, #1
 800089e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008a0:	f7ff fcec 	bl	800027c <HAL_GetTick>
 80008a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008a8:	e00a      	b.n	80008c0 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008aa:	f7ff fce7 	bl	800027c <HAL_GetTick>
 80008ae:	4602      	mov	r2, r0
 80008b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d902      	bls.n	80008c0 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 80008ba:	2303      	movs	r3, #3
 80008bc:	f000 bcb7 	b.w	800122e <HAL_RCC_OscConfig+0xdce>
 80008c0:	2302      	movs	r3, #2
 80008c2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008c6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80008ca:	fa93 f3a3 	rbit	r3, r3
 80008ce:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 80008d2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008d6:	fab3 f383 	clz	r3, r3
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	095b      	lsrs	r3, r3, #5
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d102      	bne.n	80008f0 <HAL_RCC_OscConfig+0x490>
 80008ea:	4b73      	ldr	r3, [pc, #460]	; (8000ab8 <HAL_RCC_OscConfig+0x658>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	e013      	b.n	8000918 <HAL_RCC_OscConfig+0x4b8>
 80008f0:	2302      	movs	r3, #2
 80008f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80008fa:	fa93 f3a3 	rbit	r3, r3
 80008fe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000902:	2302      	movs	r3, #2
 8000904:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000908:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800090c:	fa93 f3a3 	rbit	r3, r3
 8000910:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000914:	4b68      	ldr	r3, [pc, #416]	; (8000ab8 <HAL_RCC_OscConfig+0x658>)
 8000916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000918:	2202      	movs	r2, #2
 800091a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800091e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000922:	fa92 f2a2 	rbit	r2, r2
 8000926:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 800092a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	b252      	sxtb	r2, r2
 8000934:	f042 0220 	orr.w	r2, r2, #32
 8000938:	b252      	sxtb	r2, r2
 800093a:	b2d2      	uxtb	r2, r2
 800093c:	f002 021f 	and.w	r2, r2, #31
 8000940:	2101      	movs	r1, #1
 8000942:	fa01 f202 	lsl.w	r2, r1, r2
 8000946:	4013      	ands	r3, r2
 8000948:	2b00      	cmp	r3, #0
 800094a:	d0ae      	beq.n	80008aa <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800094c:	4b5a      	ldr	r3, [pc, #360]	; (8000ab8 <HAL_RCC_OscConfig+0x658>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	6959      	ldr	r1, [r3, #20]
 800095a:	23f8      	movs	r3, #248	; 0xf8
 800095c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000960:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000964:	fa93 f3a3 	rbit	r3, r3
 8000968:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 800096c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000970:	fab3 f383 	clz	r3, r3
 8000974:	fa01 f303 	lsl.w	r3, r1, r3
 8000978:	494f      	ldr	r1, [pc, #316]	; (8000ab8 <HAL_RCC_OscConfig+0x658>)
 800097a:	4313      	orrs	r3, r2
 800097c:	600b      	str	r3, [r1, #0]
 800097e:	e06a      	b.n	8000a56 <HAL_RCC_OscConfig+0x5f6>
 8000980:	2301      	movs	r3, #1
 8000982:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000986:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800098a:	fa93 f3a3 	rbit	r3, r3
 800098e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000992:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000996:	fab3 f383 	clz	r3, r3
 800099a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800099e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	461a      	mov	r2, r3
 80009a6:	2300      	movs	r3, #0
 80009a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009aa:	f7ff fc67 	bl	800027c <HAL_GetTick>
 80009ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009b2:	e00a      	b.n	80009ca <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009b4:	f7ff fc62 	bl	800027c <HAL_GetTick>
 80009b8:	4602      	mov	r2, r0
 80009ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d902      	bls.n	80009ca <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 80009c4:	2303      	movs	r3, #3
 80009c6:	f000 bc32 	b.w	800122e <HAL_RCC_OscConfig+0xdce>
 80009ca:	2302      	movs	r3, #2
 80009cc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80009d4:	fa93 f3a3 	rbit	r3, r3
 80009d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 80009dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009e0:	fab3 f383 	clz	r3, r3
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	095b      	lsrs	r3, r3, #5
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d102      	bne.n	80009fa <HAL_RCC_OscConfig+0x59a>
 80009f4:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <HAL_RCC_OscConfig+0x658>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	e013      	b.n	8000a22 <HAL_RCC_OscConfig+0x5c2>
 80009fa:	2302      	movs	r3, #2
 80009fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000a04:	fa93 f3a3 	rbit	r3, r3
 8000a08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000a12:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000a16:	fa93 f3a3 	rbit	r3, r3
 8000a1a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <HAL_RCC_OscConfig+0x658>)
 8000a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a22:	2202      	movs	r2, #2
 8000a24:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000a28:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000a2c:	fa92 f2a2 	rbit	r2, r2
 8000a30:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000a34:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000a38:	fab2 f282 	clz	r2, r2
 8000a3c:	b252      	sxtb	r2, r2
 8000a3e:	f042 0220 	orr.w	r2, r2, #32
 8000a42:	b252      	sxtb	r2, r2
 8000a44:	b2d2      	uxtb	r2, r2
 8000a46:	f002 021f 	and.w	r2, r2, #31
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a50:	4013      	ands	r3, r2
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1ae      	bne.n	80009b4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f003 0308 	and.w	r3, r3, #8
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f000 80d8 	beq.w	8000c16 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d067      	beq.n	8000b40 <HAL_RCC_OscConfig+0x6e0>
 8000a70:	2301      	movs	r3, #1
 8000a72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000a7a:	fa93 f3a3 	rbit	r3, r3
 8000a7e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000a82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a86:	fab3 f383 	clz	r3, r3
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_RCC_OscConfig+0x65c>)
 8000a8e:	4413      	add	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	461a      	mov	r2, r3
 8000a94:	2301      	movs	r3, #1
 8000a96:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a98:	f7ff fbf0 	bl	800027c <HAL_GetTick>
 8000a9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000aa0:	e00e      	b.n	8000ac0 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aa2:	f7ff fbeb 	bl	800027c <HAL_GetTick>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	2b02      	cmp	r3, #2
 8000ab0:	d906      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	e3bb      	b.n	800122e <HAL_RCC_OscConfig+0xdce>
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	10908120 	.word	0x10908120
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000aca:	fa93 f3a3 	rbit	r3, r3
 8000ace:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000adc:	fa93 f2a3 	rbit	r2, r3
 8000ae0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000aea:	2202      	movs	r2, #2
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	fa93 f2a3 	rbit	r2, r3
 8000af8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000afc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000afe:	4ba5      	ldr	r3, [pc, #660]	; (8000d94 <HAL_RCC_OscConfig+0x934>)
 8000b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b02:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000b06:	2102      	movs	r1, #2
 8000b08:	6019      	str	r1, [r3, #0]
 8000b0a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	fa93 f1a3 	rbit	r1, r3
 8000b14:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000b18:	6019      	str	r1, [r3, #0]
  return(result);
 8000b1a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	fab3 f383 	clz	r3, r3
 8000b24:	b25b      	sxtb	r3, r3
 8000b26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	f003 031f 	and.w	r3, r3, #31
 8000b32:	2101      	movs	r1, #1
 8000b34:	fa01 f303 	lsl.w	r3, r1, r3
 8000b38:	4013      	ands	r3, r2
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0b1      	beq.n	8000aa2 <HAL_RCC_OscConfig+0x642>
 8000b3e:	e06a      	b.n	8000c16 <HAL_RCC_OscConfig+0x7b6>
 8000b40:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000b44:	2201      	movs	r2, #1
 8000b46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b48:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	fa93 f2a3 	rbit	r2, r3
 8000b52:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000b56:	601a      	str	r2, [r3, #0]
  return(result);
 8000b58:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000b5c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b5e:	fab3 f383 	clz	r3, r3
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b8c      	ldr	r3, [pc, #560]	; (8000d98 <HAL_RCC_OscConfig+0x938>)
 8000b66:	4413      	add	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b70:	f7ff fb84 	bl	800027c <HAL_GetTick>
 8000b74:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b78:	e009      	b.n	8000b8e <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b7a:	f7ff fb7f 	bl	800027c <HAL_GetTick>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d901      	bls.n	8000b8e <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	e34f      	b.n	800122e <HAL_RCC_OscConfig+0xdce>
 8000b8e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b92:	2202      	movs	r2, #2
 8000b94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b96:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	fa93 f2a3 	rbit	r2, r3
 8000ba0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000baa:	2202      	movs	r2, #2
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	fa93 f2a3 	rbit	r2, r3
 8000bb8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	fa93 f2a3 	rbit	r2, r3
 8000bd0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000bd4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bd6:	4b6f      	ldr	r3, [pc, #444]	; (8000d94 <HAL_RCC_OscConfig+0x934>)
 8000bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bda:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000bde:	2102      	movs	r1, #2
 8000be0:	6019      	str	r1, [r3, #0]
 8000be2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	fa93 f1a3 	rbit	r1, r3
 8000bec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000bf0:	6019      	str	r1, [r3, #0]
  return(result);
 8000bf2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	fab3 f383 	clz	r3, r3
 8000bfc:	b25b      	sxtb	r3, r3
 8000bfe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000c02:	b25b      	sxtb	r3, r3
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	f003 031f 	and.w	r3, r3, #31
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c10:	4013      	ands	r3, r2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1b1      	bne.n	8000b7a <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f000 8159 	beq.w	8000ed8 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c26:	2300      	movs	r3, #0
 8000c28:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c2c:	4b59      	ldr	r3, [pc, #356]	; (8000d94 <HAL_RCC_OscConfig+0x934>)
 8000c2e:	69db      	ldr	r3, [r3, #28]
 8000c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d112      	bne.n	8000c5e <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c38:	4b56      	ldr	r3, [pc, #344]	; (8000d94 <HAL_RCC_OscConfig+0x934>)
 8000c3a:	69db      	ldr	r3, [r3, #28]
 8000c3c:	4a55      	ldr	r2, [pc, #340]	; (8000d94 <HAL_RCC_OscConfig+0x934>)
 8000c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c42:	61d3      	str	r3, [r2, #28]
 8000c44:	4b53      	ldr	r3, [pc, #332]	; (8000d94 <HAL_RCC_OscConfig+0x934>)
 8000c46:	69db      	ldr	r3, [r3, #28]
 8000c48:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c5e:	4b4f      	ldr	r3, [pc, #316]	; (8000d9c <HAL_RCC_OscConfig+0x93c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d11a      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c6a:	4b4c      	ldr	r3, [pc, #304]	; (8000d9c <HAL_RCC_OscConfig+0x93c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a4b      	ldr	r2, [pc, #300]	; (8000d9c <HAL_RCC_OscConfig+0x93c>)
 8000c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c76:	f7ff fb01 	bl	800027c <HAL_GetTick>
 8000c7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c7e:	e009      	b.n	8000c94 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c80:	f7ff fafc 	bl	800027c <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	2b64      	cmp	r3, #100	; 0x64
 8000c8e:	d901      	bls.n	8000c94 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8000c90:	2303      	movs	r3, #3
 8000c92:	e2cc      	b.n	800122e <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c94:	4b41      	ldr	r3, [pc, #260]	; (8000d9c <HAL_RCC_OscConfig+0x93c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0ef      	beq.n	8000c80 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d106      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x858>
 8000caa:	4b3a      	ldr	r3, [pc, #232]	; (8000d94 <HAL_RCC_OscConfig+0x934>)
 8000cac:	6a1b      	ldr	r3, [r3, #32]
 8000cae:	4a39      	ldr	r2, [pc, #228]	; (8000d94 <HAL_RCC_OscConfig+0x934>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6213      	str	r3, [r2, #32]
 8000cb6:	e02f      	b.n	8000d18 <HAL_RCC_OscConfig+0x8b8>
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d10c      	bne.n	8000cdc <HAL_RCC_OscConfig+0x87c>
 8000cc2:	4b34      	ldr	r3, [pc, #208]	; (8000d94 <HAL_RCC_OscConfig+0x934>)
 8000cc4:	6a1b      	ldr	r3, [r3, #32]
 8000cc6:	4a33      	ldr	r2, [pc, #204]	; (8000d94 <HAL_RCC_OscConfig+0x934>)
 8000cc8:	f023 0301 	bic.w	r3, r3, #1
 8000ccc:	6213      	str	r3, [r2, #32]
 8000cce:	4b31      	ldr	r3, [pc, #196]	; (8000d94 <HAL_RCC_OscConfig+0x934>)
 8000cd0:	6a1b      	ldr	r3, [r3, #32]
 8000cd2:	4a30      	ldr	r2, [pc, #192]	; (8000d94 <HAL_RCC_OscConfig+0x934>)
 8000cd4:	f023 0304 	bic.w	r3, r3, #4
 8000cd8:	6213      	str	r3, [r2, #32]
 8000cda:	e01d      	b.n	8000d18 <HAL_RCC_OscConfig+0x8b8>
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	2b05      	cmp	r3, #5
 8000ce4:	d10c      	bne.n	8000d00 <HAL_RCC_OscConfig+0x8a0>
 8000ce6:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <HAL_RCC_OscConfig+0x934>)
 8000ce8:	6a1b      	ldr	r3, [r3, #32]
 8000cea:	4a2a      	ldr	r2, [pc, #168]	; (8000d94 <HAL_RCC_OscConfig+0x934>)
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	6213      	str	r3, [r2, #32]
 8000cf2:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <HAL_RCC_OscConfig+0x934>)
 8000cf4:	6a1b      	ldr	r3, [r3, #32]
 8000cf6:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <HAL_RCC_OscConfig+0x934>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6213      	str	r3, [r2, #32]
 8000cfe:	e00b      	b.n	8000d18 <HAL_RCC_OscConfig+0x8b8>
 8000d00:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <HAL_RCC_OscConfig+0x934>)
 8000d02:	6a1b      	ldr	r3, [r3, #32]
 8000d04:	4a23      	ldr	r2, [pc, #140]	; (8000d94 <HAL_RCC_OscConfig+0x934>)
 8000d06:	f023 0301 	bic.w	r3, r3, #1
 8000d0a:	6213      	str	r3, [r2, #32]
 8000d0c:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <HAL_RCC_OscConfig+0x934>)
 8000d0e:	6a1b      	ldr	r3, [r3, #32]
 8000d10:	4a20      	ldr	r2, [pc, #128]	; (8000d94 <HAL_RCC_OscConfig+0x934>)
 8000d12:	f023 0304 	bic.w	r3, r3, #4
 8000d16:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	68db      	ldr	r3, [r3, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d06b      	beq.n	8000dfa <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d22:	f7ff faab 	bl	800027c <HAL_GetTick>
 8000d26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d2a:	e00b      	b.n	8000d44 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d2c:	f7ff faa6 	bl	800027c <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d901      	bls.n	8000d44 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e274      	b.n	800122e <HAL_RCC_OscConfig+0xdce>
 8000d44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d48:	2202      	movs	r2, #2
 8000d4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	fa93 f2a3 	rbit	r2, r3
 8000d56:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000d60:	2202      	movs	r2, #2
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	fa93 f2a3 	rbit	r2, r3
 8000d6e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000d72:	601a      	str	r2, [r3, #0]
  return(result);
 8000d74:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000d78:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d7a:	fab3 f383 	clz	r3, r3
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	095b      	lsrs	r3, r3, #5
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d108      	bne.n	8000da0 <HAL_RCC_OscConfig+0x940>
 8000d8e:	4b01      	ldr	r3, [pc, #4]	; (8000d94 <HAL_RCC_OscConfig+0x934>)
 8000d90:	6a1b      	ldr	r3, [r3, #32]
 8000d92:	e013      	b.n	8000dbc <HAL_RCC_OscConfig+0x95c>
 8000d94:	40021000 	.word	0x40021000
 8000d98:	10908120 	.word	0x10908120
 8000d9c:	40007000 	.word	0x40007000
 8000da0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000da4:	2202      	movs	r2, #2
 8000da6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	fa93 f2a3 	rbit	r2, r3
 8000db2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	4bbb      	ldr	r3, [pc, #748]	; (80010a8 <HAL_RCC_OscConfig+0xc48>)
 8000dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	6011      	str	r1, [r2, #0]
 8000dc4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8000dc8:	6812      	ldr	r2, [r2, #0]
 8000dca:	fa92 f1a2 	rbit	r1, r2
 8000dce:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000dd2:	6011      	str	r1, [r2, #0]
  return(result);
 8000dd4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8000dd8:	6812      	ldr	r2, [r2, #0]
 8000dda:	fab2 f282 	clz	r2, r2
 8000dde:	b252      	sxtb	r2, r2
 8000de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000de4:	b252      	sxtb	r2, r2
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	f002 021f 	and.w	r2, r2, #31
 8000dec:	2101      	movs	r1, #1
 8000dee:	fa01 f202 	lsl.w	r2, r1, r2
 8000df2:	4013      	ands	r3, r2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d099      	beq.n	8000d2c <HAL_RCC_OscConfig+0x8cc>
 8000df8:	e064      	b.n	8000ec4 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dfa:	f7ff fa3f 	bl	800027c <HAL_GetTick>
 8000dfe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e02:	e00b      	b.n	8000e1c <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e04:	f7ff fa3a 	bl	800027c <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e208      	b.n	800122e <HAL_RCC_OscConfig+0xdce>
 8000e1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e20:	2202      	movs	r2, #2
 8000e22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	fa93 f2a3 	rbit	r2, r3
 8000e2e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e38:	2202      	movs	r2, #2
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	fa93 f2a3 	rbit	r2, r3
 8000e46:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e4a:	601a      	str	r2, [r3, #0]
  return(result);
 8000e4c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e52:	fab3 f383 	clz	r3, r3
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	095b      	lsrs	r3, r3, #5
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d102      	bne.n	8000e6c <HAL_RCC_OscConfig+0xa0c>
 8000e66:	4b90      	ldr	r3, [pc, #576]	; (80010a8 <HAL_RCC_OscConfig+0xc48>)
 8000e68:	6a1b      	ldr	r3, [r3, #32]
 8000e6a:	e00d      	b.n	8000e88 <HAL_RCC_OscConfig+0xa28>
 8000e6c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e70:	2202      	movs	r2, #2
 8000e72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e74:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	fa93 f2a3 	rbit	r2, r3
 8000e7e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	4b88      	ldr	r3, [pc, #544]	; (80010a8 <HAL_RCC_OscConfig+0xc48>)
 8000e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e88:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	6011      	str	r1, [r2, #0]
 8000e90:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8000e94:	6812      	ldr	r2, [r2, #0]
 8000e96:	fa92 f1a2 	rbit	r1, r2
 8000e9a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000e9e:	6011      	str	r1, [r2, #0]
  return(result);
 8000ea0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000ea4:	6812      	ldr	r2, [r2, #0]
 8000ea6:	fab2 f282 	clz	r2, r2
 8000eaa:	b252      	sxtb	r2, r2
 8000eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000eb0:	b252      	sxtb	r2, r2
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	f002 021f 	and.w	r2, r2, #31
 8000eb8:	2101      	movs	r1, #1
 8000eba:	fa01 f202 	lsl.w	r2, r1, r2
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d19f      	bne.n	8000e04 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ec4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d105      	bne.n	8000ed8 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ecc:	4b76      	ldr	r3, [pc, #472]	; (80010a8 <HAL_RCC_OscConfig+0xc48>)
 8000ece:	69db      	ldr	r3, [r3, #28]
 8000ed0:	4a75      	ldr	r2, [pc, #468]	; (80010a8 <HAL_RCC_OscConfig+0xc48>)
 8000ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 81a4 	beq.w	800122c <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ee4:	4b70      	ldr	r3, [pc, #448]	; (80010a8 <HAL_RCC_OscConfig+0xc48>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 030c 	and.w	r3, r3, #12
 8000eec:	2b08      	cmp	r3, #8
 8000eee:	f000 819b 	beq.w	8001228 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	69db      	ldr	r3, [r3, #28]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	f040 8113 	bne.w	8001124 <HAL_RCC_OscConfig+0xcc4>
 8000efe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000f02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f08:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	fa93 f2a3 	rbit	r2, r3
 8000f12:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000f16:	601a      	str	r2, [r3, #0]
  return(result);
 8000f18:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000f1c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f1e:	fab3 f383 	clz	r3, r3
 8000f22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	2300      	movs	r3, #0
 8000f30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f32:	f7ff f9a3 	bl	800027c <HAL_GetTick>
 8000f36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f3a:	e009      	b.n	8000f50 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f3c:	f7ff f99e 	bl	800027c <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e16e      	b.n	800122e <HAL_RCC_OscConfig+0xdce>
 8000f50:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	fa93 f2a3 	rbit	r2, r3
 8000f64:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000f68:	601a      	str	r2, [r3, #0]
  return(result);
 8000f6a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000f6e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f70:	fab3 f383 	clz	r3, r3
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d102      	bne.n	8000f8a <HAL_RCC_OscConfig+0xb2a>
 8000f84:	4b48      	ldr	r3, [pc, #288]	; (80010a8 <HAL_RCC_OscConfig+0xc48>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	e01b      	b.n	8000fc2 <HAL_RCC_OscConfig+0xb62>
 8000f8a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f94:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	fa93 f2a3 	rbit	r2, r3
 8000f9e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	fa93 f2a3 	rbit	r2, r3
 8000fb8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	4b3a      	ldr	r3, [pc, #232]	; (80010a8 <HAL_RCC_OscConfig+0xc48>)
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000fc6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8000fca:	6011      	str	r1, [r2, #0]
 8000fcc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000fd0:	6812      	ldr	r2, [r2, #0]
 8000fd2:	fa92 f1a2 	rbit	r1, r2
 8000fd6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000fda:	6011      	str	r1, [r2, #0]
  return(result);
 8000fdc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000fe0:	6812      	ldr	r2, [r2, #0]
 8000fe2:	fab2 f282 	clz	r2, r2
 8000fe6:	b252      	sxtb	r2, r2
 8000fe8:	f042 0220 	orr.w	r2, r2, #32
 8000fec:	b252      	sxtb	r2, r2
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	f002 021f 	and.w	r2, r2, #31
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d19d      	bne.n	8000f3c <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001000:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <HAL_RCC_OscConfig+0xc48>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	430b      	orrs	r3, r1
 8001016:	4924      	ldr	r1, [pc, #144]	; (80010a8 <HAL_RCC_OscConfig+0xc48>)
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]
 800101c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001020:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001024:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001026:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	fa93 f2a3 	rbit	r2, r3
 8001030:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001034:	601a      	str	r2, [r3, #0]
  return(result);
 8001036:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800103a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800103c:	fab3 f383 	clz	r3, r3
 8001040:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001044:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	461a      	mov	r2, r3
 800104c:	2301      	movs	r3, #1
 800104e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff f914 	bl	800027c <HAL_GetTick>
 8001054:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001058:	e009      	b.n	800106e <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800105a:	f7ff f90f 	bl	800027c <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e0df      	b.n	800122e <HAL_RCC_OscConfig+0xdce>
 800106e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001072:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001076:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001078:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	fa93 f2a3 	rbit	r2, r3
 8001082:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001086:	601a      	str	r2, [r3, #0]
  return(result);
 8001088:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800108c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800108e:	fab3 f383 	clz	r3, r3
 8001092:	b2db      	uxtb	r3, r3
 8001094:	095b      	lsrs	r3, r3, #5
 8001096:	b2db      	uxtb	r3, r3
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d104      	bne.n	80010ac <HAL_RCC_OscConfig+0xc4c>
 80010a2:	4b01      	ldr	r3, [pc, #4]	; (80010a8 <HAL_RCC_OscConfig+0xc48>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	e01d      	b.n	80010e4 <HAL_RCC_OscConfig+0xc84>
 80010a8:	40021000 	.word	0x40021000
 80010ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	fa93 f2a3 	rbit	r2, r3
 80010c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	fa93 f2a3 	rbit	r2, r3
 80010da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	4b55      	ldr	r3, [pc, #340]	; (8001238 <HAL_RCC_OscConfig+0xdd8>)
 80010e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80010e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80010ec:	6011      	str	r1, [r2, #0]
 80010ee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80010f2:	6812      	ldr	r2, [r2, #0]
 80010f4:	fa92 f1a2 	rbit	r1, r2
 80010f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80010fc:	6011      	str	r1, [r2, #0]
  return(result);
 80010fe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001102:	6812      	ldr	r2, [r2, #0]
 8001104:	fab2 f282 	clz	r2, r2
 8001108:	b252      	sxtb	r2, r2
 800110a:	f042 0220 	orr.w	r2, r2, #32
 800110e:	b252      	sxtb	r2, r2
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	f002 021f 	and.w	r2, r2, #31
 8001116:	2101      	movs	r1, #1
 8001118:	fa01 f202 	lsl.w	r2, r1, r2
 800111c:	4013      	ands	r3, r2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d09b      	beq.n	800105a <HAL_RCC_OscConfig+0xbfa>
 8001122:	e083      	b.n	800122c <HAL_RCC_OscConfig+0xdcc>
 8001124:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001128:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800112c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	fa93 f2a3 	rbit	r2, r3
 8001138:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800113c:	601a      	str	r2, [r3, #0]
  return(result);
 800113e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001142:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001144:	fab3 f383 	clz	r3, r3
 8001148:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800114c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	461a      	mov	r2, r3
 8001154:	2300      	movs	r3, #0
 8001156:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001158:	f7ff f890 	bl	800027c <HAL_GetTick>
 800115c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001160:	e009      	b.n	8001176 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001162:	f7ff f88b 	bl	800027c <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e05b      	b.n	800122e <HAL_RCC_OscConfig+0xdce>
 8001176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800117e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001180:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	fa93 f2a3 	rbit	r2, r3
 800118a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800118e:	601a      	str	r2, [r3, #0]
  return(result);
 8001190:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001194:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001196:	fab3 f383 	clz	r3, r3
 800119a:	b2db      	uxtb	r3, r3
 800119c:	095b      	lsrs	r3, r3, #5
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d102      	bne.n	80011b0 <HAL_RCC_OscConfig+0xd50>
 80011aa:	4b23      	ldr	r3, [pc, #140]	; (8001238 <HAL_RCC_OscConfig+0xdd8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	e01b      	b.n	80011e8 <HAL_RCC_OscConfig+0xd88>
 80011b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	fa93 f2a3 	rbit	r2, r3
 80011c4:	f107 0320 	add.w	r3, r7, #32
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	fa93 f2a3 	rbit	r2, r3
 80011de:	f107 0318 	add.w	r3, r7, #24
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <HAL_RCC_OscConfig+0xdd8>)
 80011e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e8:	f107 0214 	add.w	r2, r7, #20
 80011ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80011f0:	6011      	str	r1, [r2, #0]
 80011f2:	f107 0214 	add.w	r2, r7, #20
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	fa92 f1a2 	rbit	r1, r2
 80011fc:	f107 0210 	add.w	r2, r7, #16
 8001200:	6011      	str	r1, [r2, #0]
  return(result);
 8001202:	f107 0210 	add.w	r2, r7, #16
 8001206:	6812      	ldr	r2, [r2, #0]
 8001208:	fab2 f282 	clz	r2, r2
 800120c:	b252      	sxtb	r2, r2
 800120e:	f042 0220 	orr.w	r2, r2, #32
 8001212:	b252      	sxtb	r2, r2
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	f002 021f 	and.w	r2, r2, #31
 800121a:	2101      	movs	r1, #1
 800121c:	fa01 f202 	lsl.w	r2, r1, r2
 8001220:	4013      	ands	r3, r2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d19d      	bne.n	8001162 <HAL_RCC_OscConfig+0xd02>
 8001226:	e001      	b.n	800122c <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40021000 	.word	0x40021000

0800123c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b09e      	sub	sp, #120	; 0x78
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001246:	2300      	movs	r3, #0
 8001248:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d101      	bne.n	8001254 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e164      	b.n	800151e <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001254:	4b92      	ldr	r3, [pc, #584]	; (80014a0 <HAL_RCC_ClockConfig+0x264>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d910      	bls.n	8001284 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001262:	4b8f      	ldr	r3, [pc, #572]	; (80014a0 <HAL_RCC_ClockConfig+0x264>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f023 0207 	bic.w	r2, r3, #7
 800126a:	498d      	ldr	r1, [pc, #564]	; (80014a0 <HAL_RCC_ClockConfig+0x264>)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	4313      	orrs	r3, r2
 8001270:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001272:	4b8b      	ldr	r3, [pc, #556]	; (80014a0 <HAL_RCC_ClockConfig+0x264>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	d001      	beq.n	8001284 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e14c      	b.n	800151e <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d008      	beq.n	80012a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001290:	4b84      	ldr	r3, [pc, #528]	; (80014a4 <HAL_RCC_ClockConfig+0x268>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	4981      	ldr	r1, [pc, #516]	; (80014a4 <HAL_RCC_ClockConfig+0x268>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 80df 	beq.w	800146e <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d13d      	bne.n	8001334 <HAL_RCC_ClockConfig+0xf8>
 80012b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012c0:	fa93 f3a3 	rbit	r3, r3
 80012c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80012c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c8:	fab3 f383 	clz	r3, r3
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	095b      	lsrs	r3, r3, #5
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d102      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xa6>
 80012dc:	4b71      	ldr	r3, [pc, #452]	; (80014a4 <HAL_RCC_ClockConfig+0x268>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	e00f      	b.n	8001302 <HAL_RCC_ClockConfig+0xc6>
 80012e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012ea:	fa93 f3a3 	rbit	r3, r3
 80012ee:	667b      	str	r3, [r7, #100]	; 0x64
 80012f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012f4:	663b      	str	r3, [r7, #96]	; 0x60
 80012f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012f8:	fa93 f3a3 	rbit	r3, r3
 80012fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012fe:	4b69      	ldr	r3, [pc, #420]	; (80014a4 <HAL_RCC_ClockConfig+0x268>)
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001306:	65ba      	str	r2, [r7, #88]	; 0x58
 8001308:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800130a:	fa92 f2a2 	rbit	r2, r2
 800130e:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001310:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001312:	fab2 f282 	clz	r2, r2
 8001316:	b252      	sxtb	r2, r2
 8001318:	f042 0220 	orr.w	r2, r2, #32
 800131c:	b252      	sxtb	r2, r2
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	f002 021f 	and.w	r2, r2, #31
 8001324:	2101      	movs	r1, #1
 8001326:	fa01 f202 	lsl.w	r2, r1, r2
 800132a:	4013      	ands	r3, r2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d17d      	bne.n	800142c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e0f4      	b.n	800151e <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d13d      	bne.n	80013b8 <HAL_RCC_ClockConfig+0x17c>
 800133c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001340:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001344:	fa93 f3a3 	rbit	r3, r3
 8001348:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800134a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800134c:	fab3 f383 	clz	r3, r3
 8001350:	b2db      	uxtb	r3, r3
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	b2db      	uxtb	r3, r3
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b01      	cmp	r3, #1
 800135e:	d102      	bne.n	8001366 <HAL_RCC_ClockConfig+0x12a>
 8001360:	4b50      	ldr	r3, [pc, #320]	; (80014a4 <HAL_RCC_ClockConfig+0x268>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	e00f      	b.n	8001386 <HAL_RCC_ClockConfig+0x14a>
 8001366:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800136a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800136e:	fa93 f3a3 	rbit	r3, r3
 8001372:	647b      	str	r3, [r7, #68]	; 0x44
 8001374:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001378:	643b      	str	r3, [r7, #64]	; 0x40
 800137a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800137c:	fa93 f3a3 	rbit	r3, r3
 8001380:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001382:	4b48      	ldr	r3, [pc, #288]	; (80014a4 <HAL_RCC_ClockConfig+0x268>)
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800138a:	63ba      	str	r2, [r7, #56]	; 0x38
 800138c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800138e:	fa92 f2a2 	rbit	r2, r2
 8001392:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8001394:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001396:	fab2 f282 	clz	r2, r2
 800139a:	b252      	sxtb	r2, r2
 800139c:	f042 0220 	orr.w	r2, r2, #32
 80013a0:	b252      	sxtb	r2, r2
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	f002 021f 	and.w	r2, r2, #31
 80013a8:	2101      	movs	r1, #1
 80013aa:	fa01 f202 	lsl.w	r2, r1, r2
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d13b      	bne.n	800142c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0b2      	b.n	800151e <HAL_RCC_ClockConfig+0x2e2>
 80013b8:	2302      	movs	r3, #2
 80013ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013be:	fa93 f3a3 	rbit	r3, r3
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80013c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c6:	fab3 f383 	clz	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	095b      	lsrs	r3, r3, #5
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d102      	bne.n	80013e0 <HAL_RCC_ClockConfig+0x1a4>
 80013da:	4b32      	ldr	r3, [pc, #200]	; (80014a4 <HAL_RCC_ClockConfig+0x268>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	e00d      	b.n	80013fc <HAL_RCC_ClockConfig+0x1c0>
 80013e0:	2302      	movs	r3, #2
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e6:	fa93 f3a3 	rbit	r3, r3
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
 80013ec:	2302      	movs	r3, #2
 80013ee:	623b      	str	r3, [r7, #32]
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	fa93 f3a3 	rbit	r3, r3
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <HAL_RCC_ClockConfig+0x268>)
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fc:	2202      	movs	r2, #2
 80013fe:	61ba      	str	r2, [r7, #24]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	fa92 f2a2 	rbit	r2, r2
 8001406:	617a      	str	r2, [r7, #20]
  return(result);
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	fab2 f282 	clz	r2, r2
 800140e:	b252      	sxtb	r2, r2
 8001410:	f042 0220 	orr.w	r2, r2, #32
 8001414:	b252      	sxtb	r2, r2
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	f002 021f 	and.w	r2, r2, #31
 800141c:	2101      	movs	r1, #1
 800141e:	fa01 f202 	lsl.w	r2, r1, r2
 8001422:	4013      	ands	r3, r2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e078      	b.n	800151e <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800142c:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <HAL_RCC_ClockConfig+0x268>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f023 0203 	bic.w	r2, r3, #3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	491a      	ldr	r1, [pc, #104]	; (80014a4 <HAL_RCC_ClockConfig+0x268>)
 800143a:	4313      	orrs	r3, r2
 800143c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800143e:	f7fe ff1d 	bl	800027c <HAL_GetTick>
 8001442:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001444:	e00a      	b.n	800145c <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001446:	f7fe ff19 	bl	800027c <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	f241 3288 	movw	r2, #5000	; 0x1388
 8001454:	4293      	cmp	r3, r2
 8001456:	d901      	bls.n	800145c <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e060      	b.n	800151e <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_RCC_ClockConfig+0x268>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 020c 	and.w	r2, r3, #12
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	429a      	cmp	r2, r3
 800146c:	d1eb      	bne.n	8001446 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <HAL_RCC_ClockConfig+0x264>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d215      	bcs.n	80014a8 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_RCC_ClockConfig+0x264>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f023 0207 	bic.w	r2, r3, #7
 8001484:	4906      	ldr	r1, [pc, #24]	; (80014a0 <HAL_RCC_ClockConfig+0x264>)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	4313      	orrs	r3, r2
 800148a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <HAL_RCC_ClockConfig+0x264>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d006      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e03f      	b.n	800151e <HAL_RCC_ClockConfig+0x2e2>
 800149e:	bf00      	nop
 80014a0:	40022000 	.word	0x40022000
 80014a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d008      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014b4:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <HAL_RCC_ClockConfig+0x2ec>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	4919      	ldr	r1, [pc, #100]	; (8001528 <HAL_RCC_ClockConfig+0x2ec>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d009      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_RCC_ClockConfig+0x2ec>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4911      	ldr	r1, [pc, #68]	; (8001528 <HAL_RCC_ClockConfig+0x2ec>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80014e6:	f000 f825 	bl	8001534 <HAL_RCC_GetSysClockFreq>
 80014ea:	4601      	mov	r1, r0
 80014ec:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <HAL_RCC_ClockConfig+0x2ec>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014f4:	23f0      	movs	r3, #240	; 0xf0
 80014f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	fa93 f3a3 	rbit	r3, r3
 80014fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	fab3 f383 	clz	r3, r3
 8001506:	fa22 f303 	lsr.w	r3, r2, r3
 800150a:	4a08      	ldr	r2, [pc, #32]	; (800152c <HAL_RCC_ClockConfig+0x2f0>)
 800150c:	5cd3      	ldrb	r3, [r2, r3]
 800150e:	fa21 f303 	lsr.w	r3, r1, r3
 8001512:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_RCC_ClockConfig+0x2f4>)
 8001514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001516:	2000      	movs	r0, #0
 8001518:	f7fe fe6c 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3778      	adds	r7, #120	; 0x78
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	08003900 	.word	0x08003900
 8001530:	2000001c 	.word	0x2000001c

08001534 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001534:	b480      	push	{r7}
 8001536:	b08b      	sub	sp, #44	; 0x2c
 8001538:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800154e:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	2b04      	cmp	r3, #4
 800155c:	d002      	beq.n	8001564 <HAL_RCC_GetSysClockFreq+0x30>
 800155e:	2b08      	cmp	r3, #8
 8001560:	d003      	beq.n	800156a <HAL_RCC_GetSysClockFreq+0x36>
 8001562:	e03c      	b.n	80015de <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001564:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001566:	623b      	str	r3, [r7, #32]
      break;
 8001568:	e03c      	b.n	80015e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001570:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001574:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	fa93 f3a3 	rbit	r3, r3
 800157c:	607b      	str	r3, [r7, #4]
  return(result);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	fab3 f383 	clz	r3, r3
 8001584:	fa22 f303 	lsr.w	r3, r2, r3
 8001588:	4a1c      	ldr	r2, [pc, #112]	; (80015fc <HAL_RCC_GetSysClockFreq+0xc8>)
 800158a:	5cd3      	ldrb	r3, [r2, r3]
 800158c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800158e:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001592:	f003 020f 	and.w	r2, r3, #15
 8001596:	230f      	movs	r3, #15
 8001598:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	fab3 f383 	clz	r3, r3
 80015a8:	fa22 f303 	lsr.w	r3, r2, r3
 80015ac:	4a14      	ldr	r2, [pc, #80]	; (8001600 <HAL_RCC_GetSysClockFreq+0xcc>)
 80015ae:	5cd3      	ldrb	r3, [r2, r3]
 80015b0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d008      	beq.n	80015ce <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80015bc:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fb02 f303 	mul.w	r3, r2, r3
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
 80015cc:	e004      	b.n	80015d8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	4a0c      	ldr	r2, [pc, #48]	; (8001604 <HAL_RCC_GetSysClockFreq+0xd0>)
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	623b      	str	r3, [r7, #32]
      break;
 80015dc:	e002      	b.n	80015e4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80015e0:	623b      	str	r3, [r7, #32]
      break;
 80015e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015e4:	6a3b      	ldr	r3, [r7, #32]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	372c      	adds	r7, #44	; 0x2c
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000
 80015f8:	007a1200 	.word	0x007a1200
 80015fc:	080038c8 	.word	0x080038c8
 8001600:	080038d8 	.word	0x080038d8
 8001604:	003d0900 	.word	0x003d0900

08001608 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b092      	sub	sp, #72	; 0x48
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80cf 	beq.w	80017c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162c:	4b86      	ldr	r3, [pc, #536]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10e      	bne.n	8001656 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001638:	4b83      	ldr	r3, [pc, #524]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	4a82      	ldr	r2, [pc, #520]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800163e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001642:	61d3      	str	r3, [r2, #28]
 8001644:	4b80      	ldr	r3, [pc, #512]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001650:	2301      	movs	r3, #1
 8001652:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001656:	4b7d      	ldr	r3, [pc, #500]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165e:	2b00      	cmp	r3, #0
 8001660:	d118      	bne.n	8001694 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001662:	4b7a      	ldr	r3, [pc, #488]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a79      	ldr	r2, [pc, #484]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166e:	f7fe fe05 	bl	800027c <HAL_GetTick>
 8001672:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001674:	e008      	b.n	8001688 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001676:	f7fe fe01 	bl	800027c <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b64      	cmp	r3, #100	; 0x64
 8001682:	d901      	bls.n	8001688 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e0da      	b.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x236>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001688:	4b70      	ldr	r3, [pc, #448]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001694:	4b6c      	ldr	r3, [pc, #432]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800169c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800169e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d07c      	beq.n	800179e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d075      	beq.n	800179e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016b2:	4b65      	ldr	r3, [pc, #404]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016c0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c4:	fa93 f3a3 	rbit	r3, r3
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80016ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016cc:	fab3 f383 	clz	r3, r3
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b5f      	ldr	r3, [pc, #380]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80016d4:	4413      	add	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	461a      	mov	r2, r3
 80016da:	2301      	movs	r3, #1
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016e6:	fa93 f3a3 	rbit	r3, r3
 80016ea:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80016ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016ee:	fab3 f383 	clz	r3, r3
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b56      	ldr	r3, [pc, #344]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80016f6:	4413      	add	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	461a      	mov	r2, r3
 80016fc:	2300      	movs	r3, #0
 80016fe:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001700:	4a51      	ldr	r2, [pc, #324]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001704:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b00      	cmp	r3, #0
 800170e:	d046      	beq.n	800179e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7fe fdb4 	bl	800027c <HAL_GetTick>
 8001714:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001716:	e00a      	b.n	800172e <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001718:	f7fe fdb0 	bl	800027c <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	f241 3288 	movw	r2, #5000	; 0x1388
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e087      	b.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x236>
 800172e:	2302      	movs	r3, #2
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001734:	fa93 f3a3 	rbit	r3, r3
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
 800173a:	2302      	movs	r3, #2
 800173c:	623b      	str	r3, [r7, #32]
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	fa93 f3a3 	rbit	r3, r3
 8001744:	61fb      	str	r3, [r7, #28]
  return(result);
 8001746:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001748:	fab3 f383 	clz	r3, r3
 800174c:	b2db      	uxtb	r3, r3
 800174e:	095b      	lsrs	r3, r3, #5
 8001750:	b2db      	uxtb	r3, r3
 8001752:	f043 0302 	orr.w	r3, r3, #2
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d102      	bne.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800175c:	4b3a      	ldr	r3, [pc, #232]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	e007      	b.n	8001772 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8001762:	2302      	movs	r3, #2
 8001764:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	fa93 f3a3 	rbit	r3, r3
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	4b36      	ldr	r3, [pc, #216]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	2202      	movs	r2, #2
 8001774:	613a      	str	r2, [r7, #16]
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	fa92 f2a2 	rbit	r2, r2
 800177c:	60fa      	str	r2, [r7, #12]
  return(result);
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	fab2 f282 	clz	r2, r2
 8001784:	b252      	sxtb	r2, r2
 8001786:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800178a:	b252      	sxtb	r2, r2
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	f002 021f 	and.w	r2, r2, #31
 8001792:	2101      	movs	r1, #1
 8001794:	fa01 f202 	lsl.w	r2, r1, r2
 8001798:	4013      	ands	r3, r2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0bc      	beq.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800179e:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4927      	ldr	r1, [pc, #156]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d105      	bne.n	80017c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b8:	4b23      	ldr	r3, [pc, #140]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	4a22      	ldr	r2, [pc, #136]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80017be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017d0:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80017d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d4:	f023 0203 	bic.w	r2, r3, #3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	491a      	ldr	r1, [pc, #104]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0320 	and.w	r3, r3, #32
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d008      	beq.n	8001800 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017ee:	4b16      	ldr	r3, [pc, #88]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f023 0210 	bic.w	r2, r3, #16
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	4913      	ldr	r1, [pc, #76]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001808:	2b00      	cmp	r3, #0
 800180a:	d008      	beq.n	800181e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001810:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	490b      	ldr	r1, [pc, #44]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800181a:	4313      	orrs	r3, r2
 800181c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d008      	beq.n	800183c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	4904      	ldr	r1, [pc, #16]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001838:	4313      	orrs	r3, r2
 800183a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3748      	adds	r7, #72	; 0x48
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	40007000 	.word	0x40007000
 8001850:	10908100 	.word	0x10908100

08001854 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa93 f3a3 	rbit	r3, r3
 800186e:	613b      	str	r3, [r7, #16]
  return(result);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	fab3 f383 	clz	r3, r3
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	2103      	movs	r1, #3
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	401a      	ands	r2, r3
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	fa93 f3a3 	rbit	r3, r3
 800188c:	61bb      	str	r3, [r7, #24]
  return(result);
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	fab3 f383 	clz	r3, r3
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	fa01 f303 	lsl.w	r3, r1, r3
 800189c:	431a      	orrs	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	601a      	str	r2, [r3, #0]
}
 80018a2:	bf00      	nop
 80018a4:	3724      	adds	r7, #36	; 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b085      	sub	sp, #20
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	401a      	ands	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	fb01 f303 	mul.w	r3, r1, r3
 80018cc:	431a      	orrs	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	605a      	str	r2, [r3, #4]
}
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80018de:	b480      	push	{r7}
 80018e0:	b089      	sub	sp, #36	; 0x24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	613b      	str	r3, [r7, #16]
  return(result);
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	fab3 f383 	clz	r3, r3
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	2103      	movs	r1, #3
 8001904:	fa01 f303 	lsl.w	r3, r1, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	401a      	ands	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	fa93 f3a3 	rbit	r3, r3
 8001916:	61bb      	str	r3, [r7, #24]
  return(result);
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fab3 f383 	clz	r3, r3
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	431a      	orrs	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800192c:	bf00      	nop
 800192e:	3724      	adds	r7, #36	; 0x24
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa93 f3a3 	rbit	r3, r3
 8001952:	613b      	str	r3, [r7, #16]
  return(result);
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	fab3 f383 	clz	r3, r3
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	2103      	movs	r1, #3
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	401a      	ands	r2, r3
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fa93 f3a3 	rbit	r3, r3
 8001970:	61bb      	str	r3, [r7, #24]
  return(result);
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	fab3 f383 	clz	r3, r3
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	431a      	orrs	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	60da      	str	r2, [r3, #12]
}
 8001986:	bf00      	nop
 8001988:	3724      	adds	r7, #36	; 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001992:	b480      	push	{r7}
 8001994:	b089      	sub	sp, #36	; 0x24
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6a1a      	ldr	r2, [r3, #32]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	fa93 f3a3 	rbit	r3, r3
 80019ac:	613b      	str	r3, [r7, #16]
  return(result);
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	fab3 f383 	clz	r3, r3
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	210f      	movs	r1, #15
 80019b8:	fa01 f303 	lsl.w	r3, r1, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	401a      	ands	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	fa93 f3a3 	rbit	r3, r3
 80019ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	fab3 f383 	clz	r3, r3
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	fa01 f303 	lsl.w	r3, r1, r3
 80019da:	431a      	orrs	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80019e0:	bf00      	nop
 80019e2:	3724      	adds	r7, #36	; 0x24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	0a1b      	lsrs	r3, r3, #8
 8001a00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	613b      	str	r3, [r7, #16]
  return(result);
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	fab3 f383 	clz	r3, r3
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	210f      	movs	r1, #15
 8001a14:	fa01 f303 	lsl.w	r3, r1, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	0a1b      	lsrs	r3, r3, #8
 8001a20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa93 f3a3 	rbit	r3, r3
 8001a28:	61bb      	str	r3, [r7, #24]
  return(result);
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	fab3 f383 	clz	r3, r3
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001a3e:	bf00      	nop
 8001a40:	3724      	adds	r7, #36	; 0x24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b088      	sub	sp, #32
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	fa93 f3a3 	rbit	r3, r3
 8001a68:	613b      	str	r3, [r7, #16]
  return(result);
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001a72:	e048      	b.n	8001b06 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2101      	movs	r1, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d03a      	beq.n	8001b00 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	69b9      	ldr	r1, [r7, #24]
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff fede 	bl	8001854 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d003      	beq.n	8001aa8 <LL_GPIO_Init+0x5e>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d106      	bne.n	8001ab6 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	461a      	mov	r2, r3
 8001aae:	69b9      	ldr	r1, [r7, #24]
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ff14 	bl	80018de <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	461a      	mov	r2, r3
 8001abc:	69b9      	ldr	r1, [r7, #24]
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ff3a 	bl	8001938 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d119      	bne.n	8001b00 <LL_GPIO_Init+0xb6>
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ad8:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001ada:	fab3 f383 	clz	r3, r3
 8001ade:	2b07      	cmp	r3, #7
 8001ae0:	d807      	bhi.n	8001af2 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	69b9      	ldr	r1, [r7, #24]
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ff51 	bl	8001992 <LL_GPIO_SetAFPin_0_7>
 8001af0:	e006      	b.n	8001b00 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	461a      	mov	r2, r3
 8001af8:	69b9      	ldr	r1, [r7, #24]
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ff76 	bl	80019ec <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	3301      	adds	r3, #1
 8001b04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1af      	bne.n	8001a74 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d003      	beq.n	8001b24 <LL_GPIO_Init+0xda>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d107      	bne.n	8001b34 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	6819      	ldr	r1, [r3, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff febd 	bl	80018ae <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3720      	adds	r7, #32
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f043 0201 	orr.w	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	601a      	str	r2, [r3, #0]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f023 0201 	bic.w	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	601a      	str	r2, [r3, #0]
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b085      	sub	sp, #20
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	0219      	lsls	r1, r3, #8
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	601a      	str	r2, [r3, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001bc0:	f023 0307 	bic.w	r3, r3, #7
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	609a      	str	r2, [r3, #8]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	609a      	str	r2, [r3, #8]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	611a      	str	r2, [r3, #16]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	601a      	str	r2, [r3, #0]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	605a      	str	r2, [r3, #4]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ff65 	bl	8001b5e <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	6899      	ldr	r1, [r3, #8]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ff6d 	bl	8001b7e <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ffb6 	bl	8001c1c <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ff44 	bl	8001b3e <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ffa0 	bl	8001bfc <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	6919      	ldr	r1, [r3, #16]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ff70 	bl	8001bac <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff ff81 	bl	8001bdc <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4619      	mov	r1, r3
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff ffa9 	bl	8001c38 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	4619      	mov	r1, r3
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ffb6 	bl	8001c5e <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <LL_RCC_HSI_IsReady+0x20>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	bf0c      	ite	eq
 8001d0c:	2301      	moveq	r3, #1
 8001d0e:	2300      	movne	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	40021000 	.word	0x40021000

08001d20 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <LL_RCC_LSE_IsReady+0x20>)
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	bf0c      	ite	eq
 8001d30:	2301      	moveq	r3, #1
 8001d32:	2300      	movne	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40021000 	.word	0x40021000

08001d44 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <LL_RCC_GetSysClkSource+0x18>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000

08001d60 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <LL_RCC_GetAHBPrescaler+0x18>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000

08001d7c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000

08001d98 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000

08001db4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <LL_RCC_GetUSARTClockSource+0x28>)
 8001dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dc0:	2103      	movs	r1, #3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc8:	401a      	ands	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	061b      	lsls	r3, r3, #24
 8001dce:	4313      	orrs	r3, r2
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	40021000 	.word	0x40021000

08001de0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <LL_RCC_PLL_GetMainSource+0x18>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000

08001dfc <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000

08001e18 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <LL_RCC_PLL_GetPrediv+0x18>)
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	f003 030f 	and.w	r3, r3, #15
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000

08001e34 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001e3c:	f000 f860 	bl	8001f00 <RCC_GetSystemClockFreq>
 8001e40:	4602      	mov	r2, r0
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f87a 	bl	8001f44 <RCC_GetHCLKClockFreq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f888 	bl	8001f70 <RCC_GetPCLK1ClockFreq>
 8001e60:	4602      	mov	r2, r0
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f894 	bl	8001f98 <RCC_GetPCLK2ClockFreq>
 8001e70:	4602      	mov	r2, r0
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	60da      	str	r2, [r3, #12]
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d12a      	bne.n	8001ee8 <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ff8e 	bl	8001db4 <LL_RCC_GetUSARTClockSource>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d00f      	beq.n	8001ebe <LL_RCC_GetUSARTClockFreq+0x3e>
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d005      	beq.n	8001eae <LL_RCC_GetUSARTClockFreq+0x2e>
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d114      	bne.n	8001ed0 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001ea6:	f000 f82b 	bl	8001f00 <RCC_GetSystemClockFreq>
 8001eaa:	60f8      	str	r0, [r7, #12]
        break;
 8001eac:	e021      	b.n	8001ef2 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001eae:	f7ff ff25 	bl	8001cfc <LL_RCC_HSI_IsReady>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d019      	beq.n	8001eec <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 8001eb8:	4b10      	ldr	r3, [pc, #64]	; (8001efc <LL_RCC_GetUSARTClockFreq+0x7c>)
 8001eba:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001ebc:	e016      	b.n	8001eec <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001ebe:	f7ff ff2f 	bl	8001d20 <LL_RCC_LSE_IsReady>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 8001ec8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ecc:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001ece:	e00f      	b.n	8001ef0 <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001ed0:	f000 f816 	bl	8001f00 <RCC_GetSystemClockFreq>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 f834 	bl	8001f44 <RCC_GetHCLKClockFreq>
 8001edc:	4603      	mov	r3, r0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 f846 	bl	8001f70 <RCC_GetPCLK1ClockFreq>
 8001ee4:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8001ee6:	e004      	b.n	8001ef2 <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 8001ee8:	bf00      	nop
 8001eea:	e002      	b.n	8001ef2 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8001eec:	bf00      	nop
 8001eee:	e000      	b.n	8001ef2 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8001ef0:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	007a1200 	.word	0x007a1200

08001f00 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001f0a:	f7ff ff1b 	bl	8001d44 <LL_RCC_GetSysClkSource>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d006      	beq.n	8001f22 <RCC_GetSystemClockFreq+0x22>
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d007      	beq.n	8001f28 <RCC_GetSystemClockFreq+0x28>
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d109      	bne.n	8001f30 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <RCC_GetSystemClockFreq+0x40>)
 8001f1e:	607b      	str	r3, [r7, #4]
      break;
 8001f20:	e009      	b.n	8001f36 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001f22:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <RCC_GetSystemClockFreq+0x40>)
 8001f24:	607b      	str	r3, [r7, #4]
      break;
 8001f26:	e006      	b.n	8001f36 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001f28:	f000 f84a 	bl	8001fc0 <RCC_PLL_GetFreqDomain_SYS>
 8001f2c:	6078      	str	r0, [r7, #4]
      break;
 8001f2e:	e002      	b.n	8001f36 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <RCC_GetSystemClockFreq+0x40>)
 8001f32:	607b      	str	r3, [r7, #4]
      break;
 8001f34:	bf00      	nop
  }

  return frequency;
 8001f36:	687b      	ldr	r3, [r7, #4]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	007a1200 	.word	0x007a1200

08001f44 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001f4c:	f7ff ff08 	bl	8001d60 <LL_RCC_GetAHBPrescaler>
 8001f50:	4603      	mov	r3, r0
 8001f52:	091b      	lsrs	r3, r3, #4
 8001f54:	f003 030f 	and.w	r3, r3, #15
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <RCC_GetHCLKClockFreq+0x28>)
 8001f5a:	5cd3      	ldrb	r3, [r2, r3]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	40d3      	lsrs	r3, r2
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	08003900 	.word	0x08003900

08001f70 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001f78:	f7ff ff00 	bl	8001d7c <LL_RCC_GetAPB1Prescaler>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	0a1b      	lsrs	r3, r3, #8
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <RCC_GetPCLK1ClockFreq+0x24>)
 8001f82:	5cd3      	ldrb	r3, [r2, r3]
 8001f84:	461a      	mov	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	40d3      	lsrs	r3, r2
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	08003910 	.word	0x08003910

08001f98 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001fa0:	f7ff fefa 	bl	8001d98 <LL_RCC_GetAPB2Prescaler>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	0adb      	lsrs	r3, r3, #11
 8001fa8:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <RCC_GetPCLK2ClockFreq+0x24>)
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	461a      	mov	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	40d3      	lsrs	r3, r2
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	08003910 	.word	0x08003910

08001fc0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001fce:	f7ff ff07 	bl	8001de0 <LL_RCC_PLL_GetMainSource>
 8001fd2:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fde:	d003      	beq.n	8001fe8 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001fe0:	e005      	b.n	8001fee <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001fe2:	4b13      	ldr	r3, [pc, #76]	; (8002030 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8001fe4:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001fe6:	e005      	b.n	8001ff4 <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001fea:	60fb      	str	r3, [r7, #12]
      break;
 8001fec:	e002      	b.n	8001ff4 <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8001ff0:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001ff2:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8001ff4:	f7ff ff10 	bl	8001e18 <LL_RCC_PLL_GetPrediv>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	fbb2 f4f3 	udiv	r4, r2, r3
 8002002:	f7ff fefb 	bl	8001dfc <LL_RCC_PLL_GetMultiplicator>
 8002006:	4603      	mov	r3, r0
 8002008:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800200c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002010:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	fa92 f2a2 	rbit	r2, r2
 8002018:	603a      	str	r2, [r7, #0]
  return(result);
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	fab2 f282 	clz	r2, r2
 8002020:	40d3      	lsrs	r3, r2
 8002022:	3302      	adds	r3, #2
 8002024:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bd90      	pop	{r4, r7, pc}
 8002030:	003d0900 	.word	0x003d0900
 8002034:	007a1200 	.word	0x007a1200

08002038 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	641a      	str	r2, [r3, #64]	; 0x40
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	615a      	str	r2, [r3, #20]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a2f      	ldr	r2, [pc, #188]	; (8002228 <LL_TIM_Init+0xd4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d007      	beq.n	8002180 <LL_TIM_Init+0x2c>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002176:	d003      	beq.n	8002180 <LL_TIM_Init+0x2c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a2c      	ldr	r2, [pc, #176]	; (800222c <LL_TIM_Init+0xd8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d106      	bne.n	800218e <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4313      	orrs	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a25      	ldr	r2, [pc, #148]	; (8002228 <LL_TIM_Init+0xd4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d013      	beq.n	80021be <LL_TIM_Init+0x6a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800219c:	d00f      	beq.n	80021be <LL_TIM_Init+0x6a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a22      	ldr	r2, [pc, #136]	; (800222c <LL_TIM_Init+0xd8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00b      	beq.n	80021be <LL_TIM_Init+0x6a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a21      	ldr	r2, [pc, #132]	; (8002230 <LL_TIM_Init+0xdc>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <LL_TIM_Init+0x6a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a20      	ldr	r2, [pc, #128]	; (8002234 <LL_TIM_Init+0xe0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d003      	beq.n	80021be <LL_TIM_Init+0x6a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a1f      	ldr	r2, [pc, #124]	; (8002238 <LL_TIM_Init+0xe4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d106      	bne.n	80021cc <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	4619      	mov	r1, r3
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ff3b 	bl	8002054 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	4619      	mov	r1, r3
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ff27 	bl	8002038 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a0e      	ldr	r2, [pc, #56]	; (8002228 <LL_TIM_Init+0xd4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00b      	beq.n	800220a <LL_TIM_Init+0xb6>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a0e      	ldr	r2, [pc, #56]	; (8002230 <LL_TIM_Init+0xdc>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <LL_TIM_Init+0xb6>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <LL_TIM_Init+0xe0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d003      	beq.n	800220a <LL_TIM_Init+0xb6>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a0c      	ldr	r2, [pc, #48]	; (8002238 <LL_TIM_Init+0xe4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d105      	bne.n	8002216 <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	7c1b      	ldrb	r3, [r3, #16]
 800220e:	4619      	mov	r1, r3
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff2d 	bl	8002070 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ff8c 	bl	8002134 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40012c00 	.word	0x40012c00
 800222c:	40000400 	.word	0x40000400
 8002230:	40014000 	.word	0x40014000
 8002234:	40014400 	.word	0x40014400
 8002238:	40014800 	.word	0x40014800

0800223c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002252:	d01f      	beq.n	8002294 <LL_TIM_OC_Init+0x58>
 8002254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002258:	d804      	bhi.n	8002264 <LL_TIM_OC_Init+0x28>
 800225a:	2b01      	cmp	r3, #1
 800225c:	d00c      	beq.n	8002278 <LL_TIM_OC_Init+0x3c>
 800225e:	2b10      	cmp	r3, #16
 8002260:	d011      	beq.n	8002286 <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8002262:	e033      	b.n	80022cc <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8002264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002268:	d022      	beq.n	80022b0 <LL_TIM_OC_Init+0x74>
 800226a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800226e:	d026      	beq.n	80022be <LL_TIM_OC_Init+0x82>
 8002270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002274:	d015      	beq.n	80022a2 <LL_TIM_OC_Init+0x66>
      break;
 8002276:	e029      	b.n	80022cc <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f82c 	bl	80022d8 <OC1Config>
 8002280:	4603      	mov	r3, r0
 8002282:	75fb      	strb	r3, [r7, #23]
      break;
 8002284:	e022      	b.n	80022cc <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 f8a5 	bl	80023d8 <OC2Config>
 800228e:	4603      	mov	r3, r0
 8002290:	75fb      	strb	r3, [r7, #23]
      break;
 8002292:	e01b      	b.n	80022cc <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f922 	bl	80024e0 <OC3Config>
 800229c:	4603      	mov	r3, r0
 800229e:	75fb      	strb	r3, [r7, #23]
      break;
 80022a0:	e014      	b.n	80022cc <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f99f 	bl	80025e8 <OC4Config>
 80022aa:	4603      	mov	r3, r0
 80022ac:	75fb      	strb	r3, [r7, #23]
      break;
 80022ae:	e00d      	b.n	80022cc <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 fa04 	bl	80026c0 <OC5Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	75fb      	strb	r3, [r7, #23]
      break;
 80022bc:	e006      	b.n	80022cc <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f000 fa5f 	bl	8002784 <OC6Config>
 80022c6:	4603      	mov	r3, r0
 80022c8:	75fb      	strb	r3, [r7, #23]
      break;
 80022ca:	bf00      	nop
  }

  return result;
 80022cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	f023 0201 	bic.w	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 0303 	bic.w	r3, r3, #3
 8002312:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f023 0202 	bic.w	r2, r3, #2
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f023 0201 	bic.w	r2, r3, #1
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	4313      	orrs	r3, r2
 8002340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a20      	ldr	r2, [pc, #128]	; (80023c8 <OC1Config+0xf0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00b      	beq.n	8002362 <OC1Config+0x8a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a1f      	ldr	r2, [pc, #124]	; (80023cc <OC1Config+0xf4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d007      	beq.n	8002362 <OC1Config+0x8a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a1e      	ldr	r2, [pc, #120]	; (80023d0 <OC1Config+0xf8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d003      	beq.n	8002362 <OC1Config+0x8a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a1d      	ldr	r2, [pc, #116]	; (80023d4 <OC1Config+0xfc>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d11e      	bne.n	80023a0 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f023 0208 	bic.w	r2, r3, #8
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4313      	orrs	r3, r2
 8002370:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f023 0204 	bic.w	r2, r3, #4
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4313      	orrs	r3, r2
 8002380:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4619      	mov	r1, r3
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff fe6a 	bl	800208c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40012c00 	.word	0x40012c00
 80023cc:	40014000 	.word	0x40014000
 80023d0:	40014400 	.word	0x40014400
 80023d4:	40014800 	.word	0x40014800

080023d8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	f023 0210 	bic.w	r2, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800241a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	0212      	lsls	r2, r2, #8
 8002424:	4313      	orrs	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f023 0220 	bic.w	r2, r3, #32
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f023 0210 	bic.w	r2, r3, #16
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a21      	ldr	r2, [pc, #132]	; (80024d0 <OC2Config+0xf8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d00b      	beq.n	8002468 <OC2Config+0x90>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a20      	ldr	r2, [pc, #128]	; (80024d4 <OC2Config+0xfc>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d007      	beq.n	8002468 <OC2Config+0x90>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a1f      	ldr	r2, [pc, #124]	; (80024d8 <OC2Config+0x100>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d003      	beq.n	8002468 <OC2Config+0x90>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a1e      	ldr	r2, [pc, #120]	; (80024dc <OC2Config+0x104>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d11f      	bne.n	80024a8 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	019b      	lsls	r3, r3, #6
 8002474:	4313      	orrs	r3, r2
 8002476:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	019b      	lsls	r3, r3, #6
 8002484:	4313      	orrs	r3, r2
 8002486:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4619      	mov	r1, r3
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff fdf4 	bl	80020a8 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40012c00 	.word	0x40012c00
 80024d4:	40014000 	.word	0x40014000
 80024d8:	40014400 	.word	0x40014400
 80024dc:	40014800 	.word	0x40014800

080024e0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 0303 	bic.w	r3, r3, #3
 800251a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	021b      	lsls	r3, r3, #8
 800253a:	4313      	orrs	r3, r2
 800253c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	021b      	lsls	r3, r3, #8
 800254a:	4313      	orrs	r3, r2
 800254c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a21      	ldr	r2, [pc, #132]	; (80025d8 <OC3Config+0xf8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00b      	beq.n	800256e <OC3Config+0x8e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a20      	ldr	r2, [pc, #128]	; (80025dc <OC3Config+0xfc>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d007      	beq.n	800256e <OC3Config+0x8e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a1f      	ldr	r2, [pc, #124]	; (80025e0 <OC3Config+0x100>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d003      	beq.n	800256e <OC3Config+0x8e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a1e      	ldr	r2, [pc, #120]	; (80025e4 <OC3Config+0x104>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d11f      	bne.n	80025ae <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	029b      	lsls	r3, r3, #10
 800257a:	4313      	orrs	r3, r2
 800257c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	029b      	lsls	r3, r3, #10
 800258a:	4313      	orrs	r3, r2
 800258c:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	015b      	lsls	r3, r3, #5
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	4619      	mov	r1, r3
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff fd7f 	bl	80020c4 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40012c00 	.word	0x40012c00
 80025dc:	40014000 	.word	0x40014000
 80025e0:	40014400 	.word	0x40014400
 80025e4:	40014800 	.word	0x40014800

080025e8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002622:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800262a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	0212      	lsls	r2, r2, #8
 8002634:	4313      	orrs	r3, r2
 8002636:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	031b      	lsls	r3, r3, #12
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	031b      	lsls	r3, r3, #12
 8002654:	4313      	orrs	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a15      	ldr	r2, [pc, #84]	; (80026b0 <OC4Config+0xc8>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d00b      	beq.n	8002678 <OC4Config+0x90>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a14      	ldr	r2, [pc, #80]	; (80026b4 <OC4Config+0xcc>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d007      	beq.n	8002678 <OC4Config+0x90>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a13      	ldr	r2, [pc, #76]	; (80026b8 <OC4Config+0xd0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d003      	beq.n	8002678 <OC4Config+0x90>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a12      	ldr	r2, [pc, #72]	; (80026bc <OC4Config+0xd4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d107      	bne.n	8002688 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	019b      	lsls	r3, r3, #6
 8002684:	4313      	orrs	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4619      	mov	r1, r3
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff fd20 	bl	80020e0 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40012c00 	.word	0x40012c00
 80026b4:	40014000 	.word	0x40014000
 80026b8:	40014400 	.word	0x40014400
 80026bc:	40014800 	.word	0x40014800

080026c0 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	041b      	lsls	r3, r3, #16
 8002708:	4313      	orrs	r3, r2
 800270a:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	041b      	lsls	r3, r3, #16
 8002718:	4313      	orrs	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a15      	ldr	r2, [pc, #84]	; (8002774 <OC5Config+0xb4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d00b      	beq.n	800273c <OC5Config+0x7c>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a14      	ldr	r2, [pc, #80]	; (8002778 <OC5Config+0xb8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d007      	beq.n	800273c <OC5Config+0x7c>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a13      	ldr	r2, [pc, #76]	; (800277c <OC5Config+0xbc>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d003      	beq.n	800273c <OC5Config+0x7c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a12      	ldr	r2, [pc, #72]	; (8002780 <OC5Config+0xc0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d109      	bne.n	8002750 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	021b      	lsls	r3, r3, #8
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	4619      	mov	r1, r3
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff fccd 	bl	80020fc <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40012c00 	.word	0x40012c00
 8002778:	40014000 	.word	0x40014000
 800277c:	40014400 	.word	0x40014400
 8002780:	40014800 	.word	0x40014800

08002784 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	0212      	lsls	r2, r2, #8
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	051b      	lsls	r3, r3, #20
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	051b      	lsls	r3, r3, #20
 80027de:	4313      	orrs	r3, r2
 80027e0:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a14      	ldr	r2, [pc, #80]	; (8002838 <OC6Config+0xb4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00b      	beq.n	8002802 <OC6Config+0x7e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a13      	ldr	r2, [pc, #76]	; (800283c <OC6Config+0xb8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d007      	beq.n	8002802 <OC6Config+0x7e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a12      	ldr	r2, [pc, #72]	; (8002840 <OC6Config+0xbc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d003      	beq.n	8002802 <OC6Config+0x7e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a11      	ldr	r2, [pc, #68]	; (8002844 <OC6Config+0xc0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d109      	bne.n	8002816 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	029b      	lsls	r3, r3, #10
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4619      	mov	r1, r3
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff fc78 	bl	8002118 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40012c00 	.word	0x40012c00
 800283c:	40014000 	.word	0x40014000
 8002840:	40014400 	.word	0x40014400
 8002844:	40014800 	.word	0x40014800

08002848 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b01      	cmp	r3, #1
 800285a:	bf0c      	ite	eq
 800285c:	2301      	moveq	r3, #1
 800285e:	2300      	movne	r3, #0
 8002860:	b2db      	uxtb	r3, r3
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	605a      	str	r2, [r3, #4]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	609a      	str	r2, [r3, #8]
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 80028ba:	b4b0      	push	{r4, r5, r7}
 80028bc:	b085      	sub	sp, #20
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 80028c8:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 80028ca:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d2:	d114      	bne.n	80028fe <LL_USART_SetBaudRate+0x44>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	005a      	lsls	r2, r3, #1
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	441a      	add	r2, r3
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 80028e8:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80028ec:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028ee:	086b      	lsrs	r3, r5, #1
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 80028fc:	e00a      	b.n	8002914 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	085a      	lsrs	r2, r3, #1
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	441a      	add	r2, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	fbb2 f3f3 	udiv	r3, r2, r3
 800290c:	b29b      	uxth	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	60da      	str	r2, [r3, #12]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	bcb0      	pop	{r4, r5, r7}
 800291c:	4770      	bx	lr
	...

08002920 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800292e:	2300      	movs	r3, #0
 8002930:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff ff88 	bl	8002848 <LL_USART_IsEnabled>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d14e      	bne.n	80029dc <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4b29      	ldr	r3, [pc, #164]	; (80029e8 <LL_USART_Init+0xc8>)
 8002944:	4013      	ands	r3, r2
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	6851      	ldr	r1, [r2, #4]
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	68d2      	ldr	r2, [r2, #12]
 800294e:	4311      	orrs	r1, r2
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	6912      	ldr	r2, [r2, #16]
 8002954:	4311      	orrs	r1, r2
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	6992      	ldr	r2, [r2, #24]
 800295a:	430a      	orrs	r2, r1
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	4619      	mov	r1, r3
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ff80 	bl	800286e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	4619      	mov	r1, r3
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ff8d 	bl	8002894 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a1b      	ldr	r2, [pc, #108]	; (80029ec <LL_USART_Init+0xcc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d104      	bne.n	800298c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002982:	2000      	movs	r0, #0
 8002984:	f7ff fa7c 	bl	8001e80 <LL_RCC_GetUSARTClockFreq>
 8002988:	61b8      	str	r0, [r7, #24]
 800298a:	e016      	b.n	80029ba <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a18      	ldr	r2, [pc, #96]	; (80029f0 <LL_USART_Init+0xd0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d107      	bne.n	80029a4 <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002994:	f107 0308 	add.w	r3, r7, #8
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fa4b 	bl	8001e34 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	e00a      	b.n	80029ba <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a13      	ldr	r2, [pc, #76]	; (80029f4 <LL_USART_Init+0xd4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d106      	bne.n	80029ba <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80029ac:	f107 0308 	add.w	r3, r7, #8
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fa3f 	bl	8001e34 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00d      	beq.n	80029dc <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d009      	beq.n	80029dc <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80029c8:	2300      	movs	r3, #0
 80029ca:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	699a      	ldr	r2, [r3, #24]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69b9      	ldr	r1, [r7, #24]
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff ff6f 	bl	80028ba <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80029dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3720      	adds	r7, #32
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	efff69f3 	.word	0xefff69f3
 80029ec:	40013800 	.word	0x40013800
 80029f0:	40004400 	.word	0x40004400
 80029f4:	40004800 	.word	0x40004800

080029f8 <buttonInput>:
#include "buttonInput.h"

buttonState button = { 0 };

void buttonInput() {
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
	if (!(GPIOB->IDR & 0x0008)) { //0000 1000 right high
 80029fc:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <buttonInput+0xb4>)
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d108      	bne.n	8002a1a <buttonInput+0x22>
		button.R_high++;
 8002a08:	4b29      	ldr	r3, [pc, #164]	; (8002ab0 <buttonInput+0xb8>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	4a28      	ldr	r2, [pc, #160]	; (8002ab0 <buttonInput+0xb8>)
 8002a10:	6093      	str	r3, [r2, #8]
		button.R_low = 0;
 8002a12:	4b27      	ldr	r3, [pc, #156]	; (8002ab0 <buttonInput+0xb8>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	60da      	str	r2, [r3, #12]
 8002a18:	e007      	b.n	8002a2a <buttonInput+0x32>
	} else {
		button.R_high = 0;
 8002a1a:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <buttonInput+0xb8>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	609a      	str	r2, [r3, #8]
		button.R_low++;
 8002a20:	4b23      	ldr	r3, [pc, #140]	; (8002ab0 <buttonInput+0xb8>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	3301      	adds	r3, #1
 8002a26:	4a22      	ldr	r2, [pc, #136]	; (8002ab0 <buttonInput+0xb8>)
 8002a28:	60d3      	str	r3, [r2, #12]
	}
	if (!(GPIOB->IDR & 0x0010)) { //0001 0000 left
 8002a2a:	4b20      	ldr	r3, [pc, #128]	; (8002aac <buttonInput+0xb4>)
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d108      	bne.n	8002a48 <buttonInput+0x50>
		button.L_high++;
 8002a36:	4b1e      	ldr	r3, [pc, #120]	; (8002ab0 <buttonInput+0xb8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	4a1c      	ldr	r2, [pc, #112]	; (8002ab0 <buttonInput+0xb8>)
 8002a3e:	6013      	str	r3, [r2, #0]
		button.L_low = 0;
 8002a40:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <buttonInput+0xb8>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	e007      	b.n	8002a58 <buttonInput+0x60>
	} else {
		button.L_high = 0;
 8002a48:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <buttonInput+0xb8>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
		button.L_low++;
 8002a4e:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <buttonInput+0xb8>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	3301      	adds	r3, #1
 8002a54:	4a16      	ldr	r2, [pc, #88]	; (8002ab0 <buttonInput+0xb8>)
 8002a56:	6053      	str	r3, [r2, #4]
	}

	if (button.L_high > BUTTON_SEC) {
 8002a58:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <buttonInput+0xb8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	dd03      	ble.n	8002a68 <buttonInput+0x70>
		button.rudder = BUTTON_L;
 8002a60:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <buttonInput+0xb8>)
 8002a62:	f04f 32ff 	mov.w	r2, #4294967295
 8002a66:	611a      	str	r2, [r3, #16]
	}
	if (button.R_high > BUTTON_SEC) {
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <buttonInput+0xb8>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	dd02      	ble.n	8002a76 <buttonInput+0x7e>
		button.rudder = BUTTON_R;
 8002a70:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <buttonInput+0xb8>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	611a      	str	r2, [r3, #16]
	}
	if (button.L_low > BUTTON_SEC && button.R_low > BUTTON_SEC) {
 8002a76:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <buttonInput+0xb8>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	dd06      	ble.n	8002a8c <buttonInput+0x94>
 8002a7e:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <buttonInput+0xb8>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	dd02      	ble.n	8002a8c <buttonInput+0x94>
		button.rudder = BUTTON_N;
 8002a86:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <buttonInput+0xb8>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	611a      	str	r2, [r3, #16]
	}
	if (button.L_high > BUTTON_SEC && button.R_high > BUTTON_SEC) {
 8002a8c:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <buttonInput+0xb8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	dd06      	ble.n	8002aa2 <buttonInput+0xaa>
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <buttonInput+0xb8>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	dd02      	ble.n	8002aa2 <buttonInput+0xaa>
		button.rudder = BUTTON_W;
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <buttonInput+0xb8>)
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	611a      	str	r2, [r3, #16]
	}
}
 8002aa2:	bf00      	nop
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	48000400 	.word	0x48000400
 8002ab0:	2000003c 	.word	0x2000003c

08002ab4 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac4:	2b80      	cmp	r3, #128	; 0x80
 8002ac6:	bf0c      	ite	eq
 8002ac8:	2301      	moveq	r3, #1
 8002aca:	2300      	movne	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <LL_USART_TransmitData9>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0x1FF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData9(USART_TypeDef *USARTx, uint16_t Value)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	807b      	strh	r3, [r7, #2]
  USARTx->TDR = Value & 0x1FFU;
 8002ae6:	887b      	ldrh	r3, [r7, #2]
 8002ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <qx_msLoop>:
#include <loop.h>

int time =0;
/*1ms毎に呼び出されるループ*/
void qx_msLoop() {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
	time++;
 8002b04:	4b6d      	ldr	r3, [pc, #436]	; (8002cbc <qx_msLoop+0x1bc>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	4a6c      	ldr	r2, [pc, #432]	; (8002cbc <qx_msLoop+0x1bc>)
 8002b0c:	6013      	str	r3, [r2, #0]
	if(time%100==0){
 8002b0e:	4b6b      	ldr	r3, [pc, #428]	; (8002cbc <qx_msLoop+0x1bc>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	4b6b      	ldr	r3, [pc, #428]	; (8002cc0 <qx_msLoop+0x1c0>)
 8002b14:	fb83 1302 	smull	r1, r3, r3, r2
 8002b18:	1159      	asrs	r1, r3, #5
 8002b1a:	17d3      	asrs	r3, r2, #31
 8002b1c:	1acb      	subs	r3, r1, r3
 8002b1e:	2164      	movs	r1, #100	; 0x64
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d103      	bne.n	8002b32 <qx_msLoop+0x32>
		buttonInput();
 8002b2a:	f7ff ff65 	bl	80029f8 <buttonInput>
		rudderControll();
 8002b2e:	f000 fd87 	bl	8003640 <rudderControll>
	}
	if(button.rudder==BUTTON_W){
 8002b32:	4b64      	ldr	r3, [pc, #400]	; (8002cc4 <qx_msLoop+0x1c4>)
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d101      	bne.n	8002b3e <qx_msLoop+0x3e>
		closeLeg();
 8002b3a:	f000 fdad 	bl	8003698 <closeLeg>
	}
	if(time%250==0){
 8002b3e:	4b5f      	ldr	r3, [pc, #380]	; (8002cbc <qx_msLoop+0x1bc>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4b61      	ldr	r3, [pc, #388]	; (8002cc8 <qx_msLoop+0x1c8>)
 8002b44:	fb83 1302 	smull	r1, r3, r3, r2
 8002b48:	1119      	asrs	r1, r3, #4
 8002b4a:	17d3      	asrs	r3, r2, #31
 8002b4c:	1acb      	subs	r3, r1, r3
 8002b4e:	21fa      	movs	r1, #250	; 0xfa
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f040 80ad 	bne.w	8002cb6 <qx_msLoop+0x1b6>
		LL_USART_TransmitData9(USART1, (char)((rudderDeg.N%100000/10000)+'0'));
 8002b5c:	4b5b      	ldr	r3, [pc, #364]	; (8002ccc <qx_msLoop+0x1cc>)
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	4b5b      	ldr	r3, [pc, #364]	; (8002cd0 <qx_msLoop+0x1d0>)
 8002b62:	fb83 1302 	smull	r1, r3, r3, r2
 8002b66:	1359      	asrs	r1, r3, #13
 8002b68:	17d3      	asrs	r3, r2, #31
 8002b6a:	1acb      	subs	r3, r1, r3
 8002b6c:	4959      	ldr	r1, [pc, #356]	; (8002cd4 <qx_msLoop+0x1d4>)
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	4a58      	ldr	r2, [pc, #352]	; (8002cd8 <qx_msLoop+0x1d8>)
 8002b76:	fb82 1203 	smull	r1, r2, r2, r3
 8002b7a:	1312      	asrs	r2, r2, #12
 8002b7c:	17db      	asrs	r3, r3, #31
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	3330      	adds	r3, #48	; 0x30
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4854      	ldr	r0, [pc, #336]	; (8002cdc <qx_msLoop+0x1dc>)
 8002b8c:	f7ff ffa5 	bl	8002ada <LL_USART_TransmitData9>
		while (!LL_USART_IsActiveFlag_TXE(USART1));
 8002b90:	bf00      	nop
 8002b92:	4852      	ldr	r0, [pc, #328]	; (8002cdc <qx_msLoop+0x1dc>)
 8002b94:	f7ff ff8e 	bl	8002ab4 <LL_USART_IsActiveFlag_TXE>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f9      	beq.n	8002b92 <qx_msLoop+0x92>
		LL_USART_TransmitData9(USART1, (char)((rudderDeg.N%10000/1000)+'0'));
 8002b9e:	4b4b      	ldr	r3, [pc, #300]	; (8002ccc <qx_msLoop+0x1cc>)
 8002ba0:	691a      	ldr	r2, [r3, #16]
 8002ba2:	4b4d      	ldr	r3, [pc, #308]	; (8002cd8 <qx_msLoop+0x1d8>)
 8002ba4:	fb83 1302 	smull	r1, r3, r3, r2
 8002ba8:	1319      	asrs	r1, r3, #12
 8002baa:	17d3      	asrs	r3, r2, #31
 8002bac:	1acb      	subs	r3, r1, r3
 8002bae:	f242 7110 	movw	r1, #10000	; 0x2710
 8002bb2:	fb01 f303 	mul.w	r3, r1, r3
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	4a43      	ldr	r2, [pc, #268]	; (8002cc8 <qx_msLoop+0x1c8>)
 8002bba:	fb82 1203 	smull	r1, r2, r2, r3
 8002bbe:	1192      	asrs	r2, r2, #6
 8002bc0:	17db      	asrs	r3, r3, #31
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	3330      	adds	r3, #48	; 0x30
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4843      	ldr	r0, [pc, #268]	; (8002cdc <qx_msLoop+0x1dc>)
 8002bd0:	f7ff ff83 	bl	8002ada <LL_USART_TransmitData9>
		while (!LL_USART_IsActiveFlag_TXE(USART1));
 8002bd4:	bf00      	nop
 8002bd6:	4841      	ldr	r0, [pc, #260]	; (8002cdc <qx_msLoop+0x1dc>)
 8002bd8:	f7ff ff6c 	bl	8002ab4 <LL_USART_IsActiveFlag_TXE>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f9      	beq.n	8002bd6 <qx_msLoop+0xd6>
		LL_USART_TransmitData9(USART1, (char)((rudderDeg.N%1000/100)+'0'));
 8002be2:	4b3a      	ldr	r3, [pc, #232]	; (8002ccc <qx_msLoop+0x1cc>)
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	4b38      	ldr	r3, [pc, #224]	; (8002cc8 <qx_msLoop+0x1c8>)
 8002be8:	fb83 1302 	smull	r1, r3, r3, r2
 8002bec:	1199      	asrs	r1, r3, #6
 8002bee:	17d3      	asrs	r3, r2, #31
 8002bf0:	1acb      	subs	r3, r1, r3
 8002bf2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	4a30      	ldr	r2, [pc, #192]	; (8002cc0 <qx_msLoop+0x1c0>)
 8002bfe:	fb82 1203 	smull	r1, r2, r2, r3
 8002c02:	1152      	asrs	r2, r2, #5
 8002c04:	17db      	asrs	r3, r3, #31
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	3330      	adds	r3, #48	; 0x30
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	4619      	mov	r1, r3
 8002c12:	4832      	ldr	r0, [pc, #200]	; (8002cdc <qx_msLoop+0x1dc>)
 8002c14:	f7ff ff61 	bl	8002ada <LL_USART_TransmitData9>
		while (!LL_USART_IsActiveFlag_TXE(USART1));
 8002c18:	bf00      	nop
 8002c1a:	4830      	ldr	r0, [pc, #192]	; (8002cdc <qx_msLoop+0x1dc>)
 8002c1c:	f7ff ff4a 	bl	8002ab4 <LL_USART_IsActiveFlag_TXE>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f9      	beq.n	8002c1a <qx_msLoop+0x11a>
		LL_USART_TransmitData9(USART1, (char)((rudderDeg.N%100/10)+'0'));
 8002c26:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <qx_msLoop+0x1cc>)
 8002c28:	691a      	ldr	r2, [r3, #16]
 8002c2a:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <qx_msLoop+0x1c0>)
 8002c2c:	fb83 1302 	smull	r1, r3, r3, r2
 8002c30:	1159      	asrs	r1, r3, #5
 8002c32:	17d3      	asrs	r3, r2, #31
 8002c34:	1acb      	subs	r3, r1, r3
 8002c36:	2164      	movs	r1, #100	; 0x64
 8002c38:	fb01 f303 	mul.w	r3, r1, r3
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	4a28      	ldr	r2, [pc, #160]	; (8002ce0 <qx_msLoop+0x1e0>)
 8002c40:	fb82 1203 	smull	r1, r2, r2, r3
 8002c44:	1092      	asrs	r2, r2, #2
 8002c46:	17db      	asrs	r3, r3, #31
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	3330      	adds	r3, #48	; 0x30
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	4619      	mov	r1, r3
 8002c54:	4821      	ldr	r0, [pc, #132]	; (8002cdc <qx_msLoop+0x1dc>)
 8002c56:	f7ff ff40 	bl	8002ada <LL_USART_TransmitData9>
		while (!LL_USART_IsActiveFlag_TXE(USART1));
 8002c5a:	bf00      	nop
 8002c5c:	481f      	ldr	r0, [pc, #124]	; (8002cdc <qx_msLoop+0x1dc>)
 8002c5e:	f7ff ff29 	bl	8002ab4 <LL_USART_IsActiveFlag_TXE>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0f9      	beq.n	8002c5c <qx_msLoop+0x15c>
		LL_USART_TransmitData9(USART1, (char)((rudderDeg.N%10)+'0'));
 8002c68:	4b18      	ldr	r3, [pc, #96]	; (8002ccc <qx_msLoop+0x1cc>)
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <qx_msLoop+0x1e0>)
 8002c6e:	fb83 1302 	smull	r1, r3, r3, r2
 8002c72:	1099      	asrs	r1, r3, #2
 8002c74:	17d3      	asrs	r3, r2, #31
 8002c76:	1ac9      	subs	r1, r1, r3
 8002c78:	460b      	mov	r3, r1
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	1ad1      	subs	r1, r2, r3
 8002c82:	b2cb      	uxtb	r3, r1
 8002c84:	3330      	adds	r3, #48	; 0x30
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4813      	ldr	r0, [pc, #76]	; (8002cdc <qx_msLoop+0x1dc>)
 8002c8e:	f7ff ff24 	bl	8002ada <LL_USART_TransmitData9>
		while (!LL_USART_IsActiveFlag_TXE(USART1));
 8002c92:	bf00      	nop
 8002c94:	4811      	ldr	r0, [pc, #68]	; (8002cdc <qx_msLoop+0x1dc>)
 8002c96:	f7ff ff0d 	bl	8002ab4 <LL_USART_IsActiveFlag_TXE>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f9      	beq.n	8002c94 <qx_msLoop+0x194>
		LL_USART_TransmitData9(USART1, '\n');
 8002ca0:	210a      	movs	r1, #10
 8002ca2:	480e      	ldr	r0, [pc, #56]	; (8002cdc <qx_msLoop+0x1dc>)
 8002ca4:	f7ff ff19 	bl	8002ada <LL_USART_TransmitData9>
		while (!LL_USART_IsActiveFlag_TXE(USART1));
 8002ca8:	bf00      	nop
 8002caa:	480c      	ldr	r0, [pc, #48]	; (8002cdc <qx_msLoop+0x1dc>)
 8002cac:	f7ff ff02 	bl	8002ab4 <LL_USART_IsActiveFlag_TXE>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f9      	beq.n	8002caa <qx_msLoop+0x1aa>
	}
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000050 	.word	0x20000050
 8002cc0:	51eb851f 	.word	0x51eb851f
 8002cc4:	2000003c 	.word	0x2000003c
 8002cc8:	10624dd3 	.word	0x10624dd3
 8002ccc:	20000008 	.word	0x20000008
 8002cd0:	14f8b589 	.word	0x14f8b589
 8002cd4:	000186a0 	.word	0x000186a0
 8002cd8:	68db8bad 	.word	0x68db8bad
 8002cdc:	40013800 	.word	0x40013800
 8002ce0:	66666667 	.word	0x66666667

08002ce4 <NVIC_GetPriorityGrouping>:
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <NVIC_GetPriorityGrouping+0x18>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	f003 0307 	and.w	r3, r3, #7
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <NVIC_EnableIRQ>:
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	f003 021f 	and.w	r2, r3, #31
 8002d10:	4907      	ldr	r1, [pc, #28]	; (8002d30 <NVIC_EnableIRQ+0x30>)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	2001      	movs	r0, #1
 8002d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	e000e100 	.word	0xe000e100

08002d34 <NVIC_SetPriority>:
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	6039      	str	r1, [r7, #0]
 8002d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	da0b      	bge.n	8002d60 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	490c      	ldr	r1, [pc, #48]	; (8002d80 <NVIC_SetPriority+0x4c>)
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	3b04      	subs	r3, #4
 8002d56:	0112      	lsls	r2, r2, #4
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	761a      	strb	r2, [r3, #24]
}
 8002d5e:	e009      	b.n	8002d74 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	4907      	ldr	r1, [pc, #28]	; (8002d84 <NVIC_SetPriority+0x50>)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	0112      	lsls	r2, r2, #4
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	440b      	add	r3, r1
 8002d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000ed00 	.word	0xe000ed00
 8002d84:	e000e100 	.word	0xe000e100

08002d88 <NVIC_EncodePriority>:
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b089      	sub	sp, #36	; 0x24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f1c3 0307 	rsb	r3, r3, #7
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	bf28      	it	cs
 8002da6:	2304      	movcs	r3, #4
 8002da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3304      	adds	r3, #4
 8002dae:	2b06      	cmp	r3, #6
 8002db0:	d902      	bls.n	8002db8 <NVIC_EncodePriority+0x30>
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3b03      	subs	r3, #3
 8002db6:	e000      	b.n	8002dba <NVIC_EncodePriority+0x32>
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	401a      	ands	r2, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dda:	43d9      	mvns	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de0:	4313      	orrs	r3, r2
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3724      	adds	r7, #36	; 0x24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <LL_I2C_EnableClockStretching>:
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	601a      	str	r2, [r3, #0]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <LL_I2C_DisableGeneralCall>:
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	601a      	str	r2, [r3, #0]
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <LL_I2C_SetOwnAddress2>:
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b085      	sub	sp, #20
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e42:	f023 0306 	bic.w	r3, r3, #6
 8002e46:	68b9      	ldr	r1, [r7, #8]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	60da      	str	r2, [r3, #12]
}
 8002e52:	bf00      	nop
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <LL_I2C_DisableOwnAddress2>:
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	60da      	str	r2, [r3, #12]
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_I2C_EnableAutoEndMode>:
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	605a      	str	r2, [r3, #4]
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <LL_TIM_EnableCounter>:
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f043 0201 	orr.w	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	601a      	str	r2, [r3, #0]
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <LL_TIM_EnableARRPreload>:
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	601a      	str	r2, [r3, #0]
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <LL_TIM_OC_DisableFast>:
{
 8002ee0:	b4b0      	push	{r4, r5, r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d028      	beq.n	8002f42 <LL_TIM_OC_DisableFast+0x62>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d023      	beq.n	8002f3e <LL_TIM_OC_DisableFast+0x5e>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b10      	cmp	r3, #16
 8002efa:	d01e      	beq.n	8002f3a <LL_TIM_OC_DisableFast+0x5a>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2b40      	cmp	r3, #64	; 0x40
 8002f00:	d019      	beq.n	8002f36 <LL_TIM_OC_DisableFast+0x56>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f08:	d013      	beq.n	8002f32 <LL_TIM_OC_DisableFast+0x52>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f10:	d00d      	beq.n	8002f2e <LL_TIM_OC_DisableFast+0x4e>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f18:	d007      	beq.n	8002f2a <LL_TIM_OC_DisableFast+0x4a>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f20:	d101      	bne.n	8002f26 <LL_TIM_OC_DisableFast+0x46>
 8002f22:	2307      	movs	r3, #7
 8002f24:	e00e      	b.n	8002f44 <LL_TIM_OC_DisableFast+0x64>
 8002f26:	2308      	movs	r3, #8
 8002f28:	e00c      	b.n	8002f44 <LL_TIM_OC_DisableFast+0x64>
 8002f2a:	2306      	movs	r3, #6
 8002f2c:	e00a      	b.n	8002f44 <LL_TIM_OC_DisableFast+0x64>
 8002f2e:	2305      	movs	r3, #5
 8002f30:	e008      	b.n	8002f44 <LL_TIM_OC_DisableFast+0x64>
 8002f32:	2304      	movs	r3, #4
 8002f34:	e006      	b.n	8002f44 <LL_TIM_OC_DisableFast+0x64>
 8002f36:	2303      	movs	r3, #3
 8002f38:	e004      	b.n	8002f44 <LL_TIM_OC_DisableFast+0x64>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e002      	b.n	8002f44 <LL_TIM_OC_DisableFast+0x64>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <LL_TIM_OC_DisableFast+0x64>
 8002f42:	2300      	movs	r3, #0
 8002f44:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3318      	adds	r3, #24
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <LL_TIM_OC_DisableFast+0x94>)
 8002f50:	5c5b      	ldrb	r3, [r3, r1]
 8002f52:	4413      	add	r3, r2
 8002f54:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002f56:	6822      	ldr	r2, [r4, #0]
 8002f58:	4629      	mov	r1, r5
 8002f5a:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <LL_TIM_OC_DisableFast+0x98>)
 8002f5c:	5c5b      	ldrb	r3, [r3, r1]
 8002f5e:	4619      	mov	r1, r3
 8002f60:	2304      	movs	r3, #4
 8002f62:	408b      	lsls	r3, r1
 8002f64:	43db      	mvns	r3, r3
 8002f66:	4013      	ands	r3, r2
 8002f68:	6023      	str	r3, [r4, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bcb0      	pop	{r4, r5, r7}
 8002f72:	4770      	bx	lr
 8002f74:	080038e8 	.word	0x080038e8
 8002f78:	080038f4 	.word	0x080038f4

08002f7c <LL_TIM_OC_EnablePreload>:
{
 8002f7c:	b4b0      	push	{r4, r5, r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d028      	beq.n	8002fde <LL_TIM_OC_EnablePreload+0x62>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d023      	beq.n	8002fda <LL_TIM_OC_EnablePreload+0x5e>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b10      	cmp	r3, #16
 8002f96:	d01e      	beq.n	8002fd6 <LL_TIM_OC_EnablePreload+0x5a>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b40      	cmp	r3, #64	; 0x40
 8002f9c:	d019      	beq.n	8002fd2 <LL_TIM_OC_EnablePreload+0x56>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa4:	d013      	beq.n	8002fce <LL_TIM_OC_EnablePreload+0x52>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fac:	d00d      	beq.n	8002fca <LL_TIM_OC_EnablePreload+0x4e>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb4:	d007      	beq.n	8002fc6 <LL_TIM_OC_EnablePreload+0x4a>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbc:	d101      	bne.n	8002fc2 <LL_TIM_OC_EnablePreload+0x46>
 8002fbe:	2307      	movs	r3, #7
 8002fc0:	e00e      	b.n	8002fe0 <LL_TIM_OC_EnablePreload+0x64>
 8002fc2:	2308      	movs	r3, #8
 8002fc4:	e00c      	b.n	8002fe0 <LL_TIM_OC_EnablePreload+0x64>
 8002fc6:	2306      	movs	r3, #6
 8002fc8:	e00a      	b.n	8002fe0 <LL_TIM_OC_EnablePreload+0x64>
 8002fca:	2305      	movs	r3, #5
 8002fcc:	e008      	b.n	8002fe0 <LL_TIM_OC_EnablePreload+0x64>
 8002fce:	2304      	movs	r3, #4
 8002fd0:	e006      	b.n	8002fe0 <LL_TIM_OC_EnablePreload+0x64>
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e004      	b.n	8002fe0 <LL_TIM_OC_EnablePreload+0x64>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e002      	b.n	8002fe0 <LL_TIM_OC_EnablePreload+0x64>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <LL_TIM_OC_EnablePreload+0x64>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3318      	adds	r3, #24
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4629      	mov	r1, r5
 8002fea:	4b09      	ldr	r3, [pc, #36]	; (8003010 <LL_TIM_OC_EnablePreload+0x94>)
 8002fec:	5c5b      	ldrb	r3, [r3, r1]
 8002fee:	4413      	add	r3, r2
 8002ff0:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002ff2:	6822      	ldr	r2, [r4, #0]
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <LL_TIM_OC_EnablePreload+0x98>)
 8002ff8:	5c5b      	ldrb	r3, [r3, r1]
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	2308      	movs	r3, #8
 8002ffe:	408b      	lsls	r3, r1
 8003000:	4313      	orrs	r3, r2
 8003002:	6023      	str	r3, [r4, #0]
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	bcb0      	pop	{r4, r5, r7}
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	080038e8 	.word	0x080038e8
 8003014:	080038f4 	.word	0x080038f4

08003018 <LL_TIM_SetClockSource>:
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800302a:	f023 0307 	bic.w	r3, r3, #7
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	609a      	str	r2, [r3, #8]
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <LL_TIM_SetTriggerOutput>:
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	605a      	str	r2, [r3, #4]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <LL_TIM_DisableMasterSlaveMode>:
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	609a      	str	r2, [r3, #8]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_TIM_EnableAllOutputs>:
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003094:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <LL_USART_Enable>:
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f043 0201 	orr.w	r2, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	601a      	str	r2, [r3, #0]
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_USART_ConfigAsyncMode>:
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	609a      	str	r2, [r3, #8]
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <LL_USART_DisableIT_CTS>:
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	609a      	str	r2, [r3, #8]
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8003138:	4b08      	ldr	r3, [pc, #32]	; (800315c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	4907      	ldr	r1, [pc, #28]	; (800315c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4313      	orrs	r3, r2
 8003142:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003144:	4b05      	ldr	r3, [pc, #20]	; (800315c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4013      	ands	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800314e:	68fb      	ldr	r3, [r7, #12]
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	40021000 	.word	0x40021000

08003160 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8003168:	4b08      	ldr	r3, [pc, #32]	; (800318c <LL_APB1_GRP1_EnableClock+0x2c>)
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	4907      	ldr	r1, [pc, #28]	; (800318c <LL_APB1_GRP1_EnableClock+0x2c>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4313      	orrs	r3, r2
 8003172:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003176:	69da      	ldr	r2, [r3, #28]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4013      	ands	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800317e:	68fb      	ldr	r3, [r7, #12]
}
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	40021000 	.word	0x40021000

08003190 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003198:	4b08      	ldr	r3, [pc, #32]	; (80031bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800319a:	699a      	ldr	r2, [r3, #24]
 800319c:	4907      	ldr	r1, [pc, #28]	; (80031bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <LL_APB2_GRP1_EnableClock+0x2c>)
 80031a6:	699a      	ldr	r2, [r3, #24]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4013      	ands	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031ae:	68fb      	ldr	r3, [r7, #12]
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	40021000 	.word	0x40021000

080031c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80031c4:	f7fd f800 	bl	80001c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80031c8:	f000 f809 	bl	80031de <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80031cc:	f000 f9e8 	bl	80035a0 <MX_GPIO_Init>
	MX_I2C1_Init();
 80031d0:	f000 f85e 	bl	8003290 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80031d4:	f000 f980 	bl	80034d8 <MX_USART1_UART_Init>
	MX_TIM3_Init();
 80031d8:	f000 f8c8 	bl	800336c <MX_TIM3_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80031dc:	e7fe      	b.n	80031dc <main+0x1c>

080031de <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80031de:	b580      	push	{r7, lr}
 80031e0:	b096      	sub	sp, #88	; 0x58
 80031e2:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80031e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031e8:	2228      	movs	r2, #40	; 0x28
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fb57 	bl	80038a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80031f2:	f107 031c 	add.w	r3, r7, #28
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	605a      	str	r2, [r3, #4]
 80031fc:	609a      	str	r2, [r3, #8]
 80031fe:	60da      	str	r2, [r3, #12]
 8003200:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8003202:	1d3b      	adds	r3, r7, #4
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	609a      	str	r2, [r3, #8]
 800320c:	60da      	str	r2, [r3, #12]
 800320e:	611a      	str	r2, [r3, #16]
 8003210:	615a      	str	r2, [r3, #20]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003212:	2302      	movs	r3, #2
 8003214:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003216:	2301      	movs	r3, #1
 8003218:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800321a:	2310      	movs	r3, #16
 800321c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800321e:	2302      	movs	r3, #2
 8003220:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003222:	2300      	movs	r3, #0
 8003224:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003226:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800322a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800322c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003230:	4618      	mov	r0, r3
 8003232:	f7fd f915 	bl	8000460 <HAL_RCC_OscConfig>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <SystemClock_Config+0x62>
		Error_Handler();
 800323c:	f000 f9ea 	bl	8003614 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003240:	230f      	movs	r3, #15
 8003242:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003244:	2302      	movs	r3, #2
 8003246:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003248:	2300      	movs	r3, #0
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800324c:	2300      	movs	r3, #0
 800324e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003250:	2300      	movs	r3, #0
 8003252:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8003254:	f107 031c 	add.w	r3, r7, #28
 8003258:	2101      	movs	r1, #1
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd ffee 	bl	800123c <HAL_RCC_ClockConfig>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <SystemClock_Config+0x8c>
		Error_Handler();
 8003266:	f000 f9d5 	bl	8003614 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800326a:	2321      	movs	r3, #33	; 0x21
 800326c:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8003276:	1d3b      	adds	r3, r7, #4
 8003278:	4618      	mov	r0, r3
 800327a:	f7fe f9c5 	bl	8001608 <HAL_RCCEx_PeriphCLKConfig>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <SystemClock_Config+0xaa>
		Error_Handler();
 8003284:	f000 f9c6 	bl	8003614 <Error_Handler>
	}
}
 8003288:	bf00      	nop
 800328a:	3758      	adds	r7, #88	; 0x58
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8003290:	b580      	push	{r7, lr}
 8003292:	b08e      	sub	sp, #56	; 0x38
 8003294:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN I2C1_Init 0 */

	/* USER CODE END I2C1_Init 0 */

	LL_I2C_InitTypeDef I2C_InitStruct = { 0 };
 8003296:	f107 031c 	add.w	r3, r7, #28
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	605a      	str	r2, [r3, #4]
 80032a0:	609a      	str	r2, [r3, #8]
 80032a2:	60da      	str	r2, [r3, #12]
 80032a4:	611a      	str	r2, [r3, #16]
 80032a6:	615a      	str	r2, [r3, #20]
 80032a8:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80032aa:	1d3b      	adds	r3, r7, #4
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	611a      	str	r2, [r3, #16]
 80032b8:	615a      	str	r2, [r3, #20]

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80032ba:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80032be:	f7ff ff37 	bl	8003130 <LL_AHB1_GRP1_EnableClock>
	/**I2C1 GPIO Configuration
	 PB6   ------> I2C1_SCL
	 PB7   ------> I2C1_SDA
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6 | LL_GPIO_PIN_7;
 80032c2:	23c0      	movs	r3, #192	; 0xc0
 80032c4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80032c6:	2302      	movs	r3, #2
 80032c8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80032ca:	2303      	movs	r3, #3
 80032cc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80032ce:	2301      	movs	r3, #1
 80032d0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80032d2:	2301      	movs	r3, #1
 80032d4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80032d6:	2304      	movs	r3, #4
 80032d8:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032da:	1d3b      	adds	r3, r7, #4
 80032dc:	4619      	mov	r1, r3
 80032de:	4820      	ldr	r0, [pc, #128]	; (8003360 <MX_I2C1_Init+0xd0>)
 80032e0:	f7fe fbb3 	bl	8001a4a <LL_GPIO_Init>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80032e4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80032e8:	f7ff ff3a 	bl	8003160 <LL_APB1_GRP1_EnableClock>

	/* I2C1 interrupt Init */
	NVIC_SetPriority(I2C1_EV_IRQn,
 80032ec:	f7ff fcfa 	bl	8002ce4 <NVIC_GetPriorityGrouping>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2200      	movs	r2, #0
 80032f4:	2100      	movs	r1, #0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff fd46 	bl	8002d88 <NVIC_EncodePriority>
 80032fc:	4603      	mov	r3, r0
 80032fe:	4619      	mov	r1, r3
 8003300:	201f      	movs	r0, #31
 8003302:	f7ff fd17 	bl	8002d34 <NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
	NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003306:	201f      	movs	r0, #31
 8003308:	f7ff fcfa 	bl	8002d00 <NVIC_EnableIRQ>
	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	/** I2C Initialization
	 */
	LL_I2C_EnableAutoEndMode(I2C1);
 800330c:	4815      	ldr	r0, [pc, #84]	; (8003364 <MX_I2C1_Init+0xd4>)
 800330e:	f7ff fdb6 	bl	8002e7e <LL_I2C_EnableAutoEndMode>
	LL_I2C_DisableOwnAddress2(I2C1);
 8003312:	4814      	ldr	r0, [pc, #80]	; (8003364 <MX_I2C1_Init+0xd4>)
 8003314:	f7ff fda3 	bl	8002e5e <LL_I2C_DisableOwnAddress2>
	LL_I2C_DisableGeneralCall(I2C1);
 8003318:	4812      	ldr	r0, [pc, #72]	; (8003364 <MX_I2C1_Init+0xd4>)
 800331a:	f7ff fd78 	bl	8002e0e <LL_I2C_DisableGeneralCall>
	LL_I2C_EnableClockStretching(I2C1);
 800331e:	4811      	ldr	r0, [pc, #68]	; (8003364 <MX_I2C1_Init+0xd4>)
 8003320:	f7ff fd65 	bl	8002dee <LL_I2C_EnableClockStretching>
	I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8003324:	2300      	movs	r3, #0
 8003326:	61fb      	str	r3, [r7, #28]
	I2C_InitStruct.Timing = 0x40100794;
 8003328:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <MX_I2C1_Init+0xd8>)
 800332a:	623b      	str	r3, [r7, #32]
	I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800332c:	2300      	movs	r3, #0
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
	I2C_InitStruct.DigitalFilter = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
	I2C_InitStruct.OwnAddress1 = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
	I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8003338:	2300      	movs	r3, #0
 800333a:	633b      	str	r3, [r7, #48]	; 0x30
	I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800333c:	2300      	movs	r3, #0
 800333e:	637b      	str	r3, [r7, #52]	; 0x34
	LL_I2C_Init(I2C1, &I2C_InitStruct);
 8003340:	f107 031c 	add.w	r3, r7, #28
 8003344:	4619      	mov	r1, r3
 8003346:	4807      	ldr	r0, [pc, #28]	; (8003364 <MX_I2C1_Init+0xd4>)
 8003348:	f7fe fc9c 	bl	8001c84 <LL_I2C_Init>
	LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 800334c:	2200      	movs	r2, #0
 800334e:	2100      	movs	r1, #0
 8003350:	4804      	ldr	r0, [pc, #16]	; (8003364 <MX_I2C1_Init+0xd4>)
 8003352:	f7ff fd6c 	bl	8002e2e <LL_I2C_SetOwnAddress2>
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8003356:	bf00      	nop
 8003358:	3738      	adds	r7, #56	; 0x38
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	48000400 	.word	0x48000400
 8003364:	40005400 	.word	0x40005400
 8003368:	40100794 	.word	0x40100794

0800336c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800336c:	b580      	push	{r7, lr}
 800336e:	b094      	sub	sp, #80	; 0x50
 8003370:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8003372:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	605a      	str	r2, [r3, #4]
 800337c:	609a      	str	r2, [r3, #8]
 800337e:	60da      	str	r2, [r3, #12]
 8003380:	611a      	str	r2, [r3, #16]
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = { 0 };
 8003382:	f107 031c 	add.w	r3, r7, #28
 8003386:	2220      	movs	r2, #32
 8003388:	2100      	movs	r1, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fa88 	bl	80038a0 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003390:	1d3b      	adds	r3, r7, #4
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	605a      	str	r2, [r3, #4]
 8003398:	609a      	str	r2, [r3, #8]
 800339a:	60da      	str	r2, [r3, #12]
 800339c:	611a      	str	r2, [r3, #16]
 800339e:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80033a0:	2002      	movs	r0, #2
 80033a2:	f7ff fedd 	bl	8003160 <LL_APB1_GRP1_EnableClock>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	TIM_InitStruct.Prescaler = 20;
 80033a6:	2314      	movs	r3, #20
 80033a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80033aa:	2300      	movs	r3, #0
 80033ac:	643b      	str	r3, [r7, #64]	; 0x40
	TIM_InitStruct.Autoreload = 36000;
 80033ae:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 80033b2:	647b      	str	r3, [r7, #68]	; 0x44
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80033b4:	2300      	movs	r3, #0
 80033b6:	64bb      	str	r3, [r7, #72]	; 0x48
	LL_TIM_Init(TIM3, &TIM_InitStruct);
 80033b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80033bc:	4619      	mov	r1, r3
 80033be:	4844      	ldr	r0, [pc, #272]	; (80034d0 <MX_TIM3_Init+0x164>)
 80033c0:	f7fe fec8 	bl	8002154 <LL_TIM_Init>
	LL_TIM_EnableARRPreload(TIM3);
 80033c4:	4842      	ldr	r0, [pc, #264]	; (80034d0 <MX_TIM3_Init+0x164>)
 80033c6:	f7ff fd7a 	bl	8002ebe <LL_TIM_EnableARRPreload>
	LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80033ca:	2100      	movs	r1, #0
 80033cc:	4840      	ldr	r0, [pc, #256]	; (80034d0 <MX_TIM3_Init+0x164>)
 80033ce:	f7ff fe23 	bl	8003018 <LL_TIM_SetClockSource>
	LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 80033d2:	2101      	movs	r1, #1
 80033d4:	483e      	ldr	r0, [pc, #248]	; (80034d0 <MX_TIM3_Init+0x164>)
 80033d6:	f7ff fdd1 	bl	8002f7c <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80033da:	2360      	movs	r3, #96	; 0x60
 80033dc:	61fb      	str	r3, [r7, #28]
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 80033de:	2301      	movs	r3, #1
 80033e0:	623b      	str	r3, [r7, #32]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
	TIM_OC_InitStruct.CompareValue = 3000;
 80033e6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_LOW;
 80033ec:	2302      	movs	r3, #2
 80033ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80033f0:	f107 031c 	add.w	r3, r7, #28
 80033f4:	461a      	mov	r2, r3
 80033f6:	2101      	movs	r1, #1
 80033f8:	4835      	ldr	r0, [pc, #212]	; (80034d0 <MX_TIM3_Init+0x164>)
 80033fa:	f7fe ff1f 	bl	800223c <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 80033fe:	2101      	movs	r1, #1
 8003400:	4833      	ldr	r0, [pc, #204]	; (80034d0 <MX_TIM3_Init+0x164>)
 8003402:	f7ff fd6d 	bl	8002ee0 <LL_TIM_OC_DisableFast>
	LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8003406:	2110      	movs	r1, #16
 8003408:	4831      	ldr	r0, [pc, #196]	; (80034d0 <MX_TIM3_Init+0x164>)
 800340a:	f7ff fdb7 	bl	8002f7c <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 800340e:	2301      	movs	r3, #1
 8003410:	623b      	str	r3, [r7, #32]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003412:	2300      	movs	r3, #0
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
	LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003416:	f107 031c 	add.w	r3, r7, #28
 800341a:	461a      	mov	r2, r3
 800341c:	2110      	movs	r1, #16
 800341e:	482c      	ldr	r0, [pc, #176]	; (80034d0 <MX_TIM3_Init+0x164>)
 8003420:	f7fe ff0c 	bl	800223c <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8003424:	2110      	movs	r1, #16
 8003426:	482a      	ldr	r0, [pc, #168]	; (80034d0 <MX_TIM3_Init+0x164>)
 8003428:	f7ff fd5a 	bl	8002ee0 <LL_TIM_OC_DisableFast>
	LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 800342c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003430:	4827      	ldr	r0, [pc, #156]	; (80034d0 <MX_TIM3_Init+0x164>)
 8003432:	f7ff fda3 	bl	8002f7c <LL_TIM_OC_EnablePreload>
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_ENABLE;
 8003436:	2301      	movs	r3, #1
 8003438:	623b      	str	r3, [r7, #32]
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800343a:	2300      	movs	r3, #0
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
	LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800343e:	f107 031c 	add.w	r3, r7, #28
 8003442:	461a      	mov	r2, r3
 8003444:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003448:	4821      	ldr	r0, [pc, #132]	; (80034d0 <MX_TIM3_Init+0x164>)
 800344a:	f7fe fef7 	bl	800223c <LL_TIM_OC_Init>
	LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
 800344e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003452:	481f      	ldr	r0, [pc, #124]	; (80034d0 <MX_TIM3_Init+0x164>)
 8003454:	f7ff fd44 	bl	8002ee0 <LL_TIM_OC_DisableFast>
	LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8003458:	2100      	movs	r1, #0
 800345a:	481d      	ldr	r0, [pc, #116]	; (80034d0 <MX_TIM3_Init+0x164>)
 800345c:	f7ff fdf1 	bl	8003042 <LL_TIM_SetTriggerOutput>
	LL_TIM_DisableMasterSlaveMode(TIM3);
 8003460:	481b      	ldr	r0, [pc, #108]	; (80034d0 <MX_TIM3_Init+0x164>)
 8003462:	f7ff fe01 	bl	8003068 <LL_TIM_DisableMasterSlaveMode>
	/* USER CODE BEGIN TIM3_Init 2 */
	LL_TIM_EnableCounter(TIM3);
 8003466:	481a      	ldr	r0, [pc, #104]	; (80034d0 <MX_TIM3_Init+0x164>)
 8003468:	f7ff fd19 	bl	8002e9e <LL_TIM_EnableCounter>
	LL_TIM_EnableAllOutputs(TIM3);
 800346c:	4818      	ldr	r0, [pc, #96]	; (80034d0 <MX_TIM3_Init+0x164>)
 800346e:	f7ff fe0b 	bl	8003088 <LL_TIM_EnableAllOutputs>

	/* USER CODE END TIM3_Init 2 */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003472:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003476:	f7ff fe5b 	bl	8003130 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800347a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800347e:	f7ff fe57 	bl	8003130 <LL_AHB1_GRP1_EnableClock>
	/**TIM3 GPIO Configuration
	 PA6   ------> TIM3_CH1
	 PA7   ------> TIM3_CH2
	 PB0   ------> TIM3_CH3
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6 | LL_GPIO_PIN_7;
 8003482:	23c0      	movs	r3, #192	; 0xc0
 8003484:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003486:	2302      	movs	r3, #2
 8003488:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 800348a:	2301      	movs	r3, #1
 800348c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800348e:	2300      	movs	r3, #0
 8003490:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003496:	2302      	movs	r3, #2
 8003498:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349a:	1d3b      	adds	r3, r7, #4
 800349c:	4619      	mov	r1, r3
 800349e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034a2:	f7fe fad2 	bl	8001a4a <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80034a6:	2301      	movs	r3, #1
 80034a8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80034aa:	2302      	movs	r3, #2
 80034ac:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 80034ae:	2301      	movs	r3, #1
 80034b0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80034ba:	2302      	movs	r3, #2
 80034bc:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034be:	1d3b      	adds	r3, r7, #4
 80034c0:	4619      	mov	r1, r3
 80034c2:	4804      	ldr	r0, [pc, #16]	; (80034d4 <MX_TIM3_Init+0x168>)
 80034c4:	f7fe fac1 	bl	8001a4a <LL_GPIO_Init>

}
 80034c8:	bf00      	nop
 80034ca:	3750      	adds	r7, #80	; 0x50
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40000400 	.word	0x40000400
 80034d4:	48000400 	.word	0x48000400

080034d8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08e      	sub	sp, #56	; 0x38
 80034dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART1_Init 0 */

	/* USER CODE END USART1_Init 0 */

	LL_USART_InitTypeDef USART_InitStruct = { 0 };
 80034de:	f107 031c 	add.w	r3, r7, #28
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	605a      	str	r2, [r3, #4]
 80034e8:	609a      	str	r2, [r3, #8]
 80034ea:	60da      	str	r2, [r3, #12]
 80034ec:	611a      	str	r2, [r3, #16]
 80034ee:	615a      	str	r2, [r3, #20]
 80034f0:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80034f2:	1d3b      	adds	r3, r7, #4
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	605a      	str	r2, [r3, #4]
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	611a      	str	r2, [r3, #16]
 8003500:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8003502:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003506:	f7ff fe43 	bl	8003190 <LL_APB2_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800350a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800350e:	f7ff fe0f 	bl	8003130 <LL_AHB1_GRP1_EnableClock>
	/**USART1 GPIO Configuration
	 PA9   ------> USART1_TX
	 PA10   ------> USART1_RX
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_9 | LL_GPIO_PIN_10;
 8003512:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003516:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003518:	2302      	movs	r3, #2
 800351a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800351c:	2303      	movs	r3, #3
 800351e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003520:	2300      	movs	r3, #0
 8003522:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003528:	2307      	movs	r3, #7
 800352a:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800352c:	1d3b      	adds	r3, r7, #4
 800352e:	4619      	mov	r1, r3
 8003530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003534:	f7fe fa89 	bl	8001a4a <LL_GPIO_Init>

	/* USART1 interrupt Init */
	NVIC_SetPriority(USART1_IRQn,
 8003538:	f7ff fbd4 	bl	8002ce4 <NVIC_GetPriorityGrouping>
 800353c:	4603      	mov	r3, r0
 800353e:	2200      	movs	r2, #0
 8003540:	2100      	movs	r1, #0
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fc20 	bl	8002d88 <NVIC_EncodePriority>
 8003548:	4603      	mov	r3, r0
 800354a:	4619      	mov	r1, r3
 800354c:	2025      	movs	r0, #37	; 0x25
 800354e:	f7ff fbf1 	bl	8002d34 <NVIC_SetPriority>
			NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
	NVIC_EnableIRQ(USART1_IRQn);
 8003552:	2025      	movs	r0, #37	; 0x25
 8003554:	f7ff fbd4 	bl	8002d00 <NVIC_EnableIRQ>

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	USART_InitStruct.BaudRate = 9600;
 8003558:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800355c:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800355e:	2300      	movs	r3, #0
 8003560:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003562:	2300      	movs	r3, #0
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003566:	2300      	movs	r3, #0
 8003568:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800356a:	230c      	movs	r3, #12
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800356e:	2300      	movs	r3, #0
 8003570:	633b      	str	r3, [r7, #48]	; 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003572:	2300      	movs	r3, #0
 8003574:	637b      	str	r3, [r7, #52]	; 0x34
	LL_USART_Init(USART1, &USART_InitStruct);
 8003576:	f107 031c 	add.w	r3, r7, #28
 800357a:	4619      	mov	r1, r3
 800357c:	4807      	ldr	r0, [pc, #28]	; (800359c <MX_USART1_UART_Init+0xc4>)
 800357e:	f7ff f9cf 	bl	8002920 <LL_USART_Init>
	LL_USART_DisableIT_CTS(USART1);
 8003582:	4806      	ldr	r0, [pc, #24]	; (800359c <MX_USART1_UART_Init+0xc4>)
 8003584:	f7ff fdb6 	bl	80030f4 <LL_USART_DisableIT_CTS>
	LL_USART_ConfigAsyncMode(USART1);
 8003588:	4804      	ldr	r0, [pc, #16]	; (800359c <MX_USART1_UART_Init+0xc4>)
 800358a:	f7ff fd9d 	bl	80030c8 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART1);
 800358e:	4803      	ldr	r0, [pc, #12]	; (800359c <MX_USART1_UART_Init+0xc4>)
 8003590:	f7ff fd8a 	bl	80030a8 <LL_USART_Enable>
	/* USER CODE BEGIN USART1_Init 2 */
	/* USART1 interrupt*/
	//LL_USART_EnableIT_RXNE(USART1);
	/* USER CODE END USART1_Init 2 */

}
 8003594:	bf00      	nop
 8003596:	3738      	adds	r7, #56	; 0x38
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40013800 	.word	0x40013800

080035a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80035a6:	463b      	mov	r3, r7
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	611a      	str	r2, [r3, #16]
 80035b4:	615a      	str	r2, [r3, #20]

	/* GPIO Ports Clock Enable */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80035b6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80035ba:	f7ff fdb9 	bl	8003130 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80035be:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80035c2:	f7ff fdb5 	bl	8003130 <LL_AHB1_GRP1_EnableClock>

	/**/
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0 | LL_GPIO_PIN_1);
 80035c6:	2103      	movs	r1, #3
 80035c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035cc:	f7ff fda2 	bl	8003114 <LL_GPIO_ResetOutputPin>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0 | LL_GPIO_PIN_1;
 80035d0:	2303      	movs	r3, #3
 80035d2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80035d4:	2301      	movs	r3, #1
 80035d6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80035d8:	2300      	movs	r3, #0
 80035da:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80035e0:	2300      	movs	r3, #0
 80035e2:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e4:	463b      	mov	r3, r7
 80035e6:	4619      	mov	r1, r3
 80035e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035ec:	f7fe fa2d 	bl	8001a4a <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3 | LL_GPIO_PIN_4;
 80035f0:	2318      	movs	r3, #24
 80035f2:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80035f4:	2300      	movs	r3, #0
 80035f6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80035f8:	2301      	movs	r3, #1
 80035fa:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035fc:	463b      	mov	r3, r7
 80035fe:	4619      	mov	r1, r3
 8003600:	4803      	ldr	r0, [pc, #12]	; (8003610 <MX_GPIO_Init+0x70>)
 8003602:	f7fe fa22 	bl	8001a4a <LL_GPIO_Init>

}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	48000400 	.word	0x48000400

08003614 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003618:	bf00      	nop
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <LL_GPIO_SetOutputPin>:
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	619a      	str	r2, [r3, #24]
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <rudderControll>:
#include "servoControll.h"

rudderDegState rudderDeg = { .L = SERVO_DEG_L, .N = SERVO_DEG_N, .R =
SERVO_DEG_R };

void rudderControll() {
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
	/*if (button.rudder == BUTTON_N) {
	    TIM3->CCR3 = rudderDeg.N;
	}*/
	if (button.rudder == BUTTON_L) {
 8003644:	4b11      	ldr	r3, [pc, #68]	; (800368c <rudderControll+0x4c>)
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364c:	d104      	bne.n	8003658 <rudderControll+0x18>
		//TIM3->CCR3 = rudderDeg.L;
		rudderDeg.N-=10;
 800364e:	4b10      	ldr	r3, [pc, #64]	; (8003690 <rudderControll+0x50>)
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	3b0a      	subs	r3, #10
 8003654:	4a0e      	ldr	r2, [pc, #56]	; (8003690 <rudderControll+0x50>)
 8003656:	6113      	str	r3, [r2, #16]
	}
	if (button.rudder == BUTTON_R) {
 8003658:	4b0c      	ldr	r3, [pc, #48]	; (800368c <rudderControll+0x4c>)
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d104      	bne.n	800366a <rudderControll+0x2a>
		//TIM3->CCR3 = rudderDeg.R;
		rudderDeg.N+=10;
 8003660:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <rudderControll+0x50>)
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	330a      	adds	r3, #10
 8003666:	4a0a      	ldr	r2, [pc, #40]	; (8003690 <rudderControll+0x50>)
 8003668:	6113      	str	r3, [r2, #16]

	}
	TIM3->CCR1 = rudderDeg.N;
 800366a:	4b09      	ldr	r3, [pc, #36]	; (8003690 <rudderControll+0x50>)
 800366c:	691a      	ldr	r2, [r3, #16]
 800366e:	4b09      	ldr	r3, [pc, #36]	; (8003694 <rudderControll+0x54>)
 8003670:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = rudderDeg.N;
 8003672:	4b07      	ldr	r3, [pc, #28]	; (8003690 <rudderControll+0x50>)
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	4b07      	ldr	r3, [pc, #28]	; (8003694 <rudderControll+0x54>)
 8003678:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = rudderDeg.N;
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <rudderControll+0x50>)
 800367c:	691a      	ldr	r2, [r3, #16]
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <rudderControll+0x54>)
 8003680:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003682:	bf00      	nop
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	2000003c 	.word	0x2000003c
 8003690:	20000008 	.word	0x20000008
 8003694:	40000400 	.word	0x40000400

08003698 <closeLeg>:
		TIM3->CCR2 = rudderDeg.R;
		//rudderDeg.N+=5;
	}
}

void closeLeg(){
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 800369c:	2101      	movs	r1, #1
 800369e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036a2:	f7ff ffbe 	bl	8003622 <LL_GPIO_SetOutputPin>
}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036b2:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <HAL_MspInit+0x44>)
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	4a0e      	ldr	r2, [pc, #56]	; (80036f0 <HAL_MspInit+0x44>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	6193      	str	r3, [r2, #24]
 80036be:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <HAL_MspInit+0x44>)
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	607b      	str	r3, [r7, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036ca:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <HAL_MspInit+0x44>)
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	4a08      	ldr	r2, [pc, #32]	; (80036f0 <HAL_MspInit+0x44>)
 80036d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d4:	61d3      	str	r3, [r2, #28]
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_MspInit+0x44>)
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000

080036f4 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8003702:	b480      	push	{r7}
 8003704:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8003706:	e7fe      	b.n	8003706 <HardFault_Handler+0x4>

08003708 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 800370c:	e7fe      	b.n	800370c <MemManage_Handler+0x4>

0800370e <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800370e:	b480      	push	{r7}
 8003710:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8003712:	e7fe      	b.n	8003712 <BusFault_Handler+0x4>

08003714 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8003718:	e7fe      	b.n	8003718 <UsageFault_Handler+0x4>

0800371a <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800371a:	b480      	push	{r7}
 800371c:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800371e:	bf00      	nop
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800372c:	bf00      	nop
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8003736:	b480      	push	{r7}
 8003738:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8003748:	f7fc fd84 	bl	8000254 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */
	qx_msLoop();
 800374c:	f7ff f9d8 	bl	8002b00 <qx_msLoop>
	/* USER CODE END SysTick_IRQn 1 */
}
 8003750:	bf00      	nop
 8003752:	bd80      	pop	{r7, pc}

08003754 <I2C1_EV_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
 */
void I2C1_EV_IRQHandler(void) {
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_EV_IRQn 0 */

	/* USER CODE BEGIN I2C1_EV_IRQn 1 */

	/* USER CODE END I2C1_EV_IRQn 1 */
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
 */
void USART1_IRQHandler(void) {
 8003762:	b480      	push	{r7}
 8003764:	af00      	add	r7, sp, #0
	}*/
	/* USER CODE END USART1_IRQn 0 */
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003774:	4b1f      	ldr	r3, [pc, #124]	; (80037f4 <SystemInit+0x84>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377a:	4a1e      	ldr	r2, [pc, #120]	; (80037f4 <SystemInit+0x84>)
 800377c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003784:	4b1c      	ldr	r3, [pc, #112]	; (80037f8 <SystemInit+0x88>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1b      	ldr	r2, [pc, #108]	; (80037f8 <SystemInit+0x88>)
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003790:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <SystemInit+0x88>)
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	4918      	ldr	r1, [pc, #96]	; (80037f8 <SystemInit+0x88>)
 8003796:	4b19      	ldr	r3, [pc, #100]	; (80037fc <SystemInit+0x8c>)
 8003798:	4013      	ands	r3, r2
 800379a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800379c:	4b16      	ldr	r3, [pc, #88]	; (80037f8 <SystemInit+0x88>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a15      	ldr	r2, [pc, #84]	; (80037f8 <SystemInit+0x88>)
 80037a2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80037a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037aa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80037ac:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <SystemInit+0x88>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a11      	ldr	r2, [pc, #68]	; (80037f8 <SystemInit+0x88>)
 80037b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037b6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80037b8:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <SystemInit+0x88>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4a0e      	ldr	r2, [pc, #56]	; (80037f8 <SystemInit+0x88>)
 80037be:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80037c2:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <SystemInit+0x88>)
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	4a0b      	ldr	r2, [pc, #44]	; (80037f8 <SystemInit+0x88>)
 80037ca:	f023 030f 	bic.w	r3, r3, #15
 80037ce:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <SystemInit+0x88>)
 80037d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037d4:	4908      	ldr	r1, [pc, #32]	; (80037f8 <SystemInit+0x88>)
 80037d6:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <SystemInit+0x90>)
 80037d8:	4013      	ands	r3, r2
 80037da:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80037dc:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <SystemInit+0x88>)
 80037de:	2200      	movs	r2, #0
 80037e0:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037e2:	4b04      	ldr	r3, [pc, #16]	; (80037f4 <SystemInit+0x84>)
 80037e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037e8:	609a      	str	r2, [r3, #8]
#endif
}
 80037ea:	bf00      	nop
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	e000ed00 	.word	0xe000ed00
 80037f8:	40021000 	.word	0x40021000
 80037fc:	f87fc00c 	.word	0xf87fc00c
 8003800:	ff00fccc 	.word	0xff00fccc

08003804 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800383c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003808:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800380a:	e003      	b.n	8003814 <LoopCopyDataInit>

0800380c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800380c:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800380e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003810:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003812:	3104      	adds	r1, #4

08003814 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003814:	480b      	ldr	r0, [pc, #44]	; (8003844 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003816:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003818:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800381a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800381c:	d3f6      	bcc.n	800380c <CopyDataInit>
	ldr	r2, =_sbss
 800381e:	4a0b      	ldr	r2, [pc, #44]	; (800384c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003820:	e002      	b.n	8003828 <LoopFillZerobss>

08003822 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003822:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003824:	f842 3b04 	str.w	r3, [r2], #4

08003828 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003828:	4b09      	ldr	r3, [pc, #36]	; (8003850 <LoopForever+0x16>)
	cmp	r2, r3
 800382a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800382c:	d3f9      	bcc.n	8003822 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800382e:	f7ff ff9f 	bl	8003770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003832:	f000 f811 	bl	8003858 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003836:	f7ff fcc3 	bl	80031c0 <main>

0800383a <LoopForever>:

LoopForever:
    b LoopForever
 800383a:	e7fe      	b.n	800383a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800383c:	20002fff 	.word	0x20002fff
	ldr	r3, =_sidata
 8003840:	08003920 	.word	0x08003920
	ldr	r0, =_sdata
 8003844:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003848:	20000020 	.word	0x20000020
	ldr	r2, =_sbss
 800384c:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 8003850:	20000058 	.word	0x20000058

08003854 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003854:	e7fe      	b.n	8003854 <ADC1_2_IRQHandler>
	...

08003858 <__libc_init_array>:
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	4e0d      	ldr	r6, [pc, #52]	; (8003890 <__libc_init_array+0x38>)
 800385c:	4c0d      	ldr	r4, [pc, #52]	; (8003894 <__libc_init_array+0x3c>)
 800385e:	1ba4      	subs	r4, r4, r6
 8003860:	10a4      	asrs	r4, r4, #2
 8003862:	2500      	movs	r5, #0
 8003864:	42a5      	cmp	r5, r4
 8003866:	d109      	bne.n	800387c <__libc_init_array+0x24>
 8003868:	4e0b      	ldr	r6, [pc, #44]	; (8003898 <__libc_init_array+0x40>)
 800386a:	4c0c      	ldr	r4, [pc, #48]	; (800389c <__libc_init_array+0x44>)
 800386c:	f000 f820 	bl	80038b0 <_init>
 8003870:	1ba4      	subs	r4, r4, r6
 8003872:	10a4      	asrs	r4, r4, #2
 8003874:	2500      	movs	r5, #0
 8003876:	42a5      	cmp	r5, r4
 8003878:	d105      	bne.n	8003886 <__libc_init_array+0x2e>
 800387a:	bd70      	pop	{r4, r5, r6, pc}
 800387c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003880:	4798      	blx	r3
 8003882:	3501      	adds	r5, #1
 8003884:	e7ee      	b.n	8003864 <__libc_init_array+0xc>
 8003886:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800388a:	4798      	blx	r3
 800388c:	3501      	adds	r5, #1
 800388e:	e7f2      	b.n	8003876 <__libc_init_array+0x1e>
 8003890:	08003918 	.word	0x08003918
 8003894:	08003918 	.word	0x08003918
 8003898:	08003918 	.word	0x08003918
 800389c:	0800391c 	.word	0x0800391c

080038a0 <memset>:
 80038a0:	4402      	add	r2, r0
 80038a2:	4603      	mov	r3, r0
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d100      	bne.n	80038aa <memset+0xa>
 80038a8:	4770      	bx	lr
 80038aa:	f803 1b01 	strb.w	r1, [r3], #1
 80038ae:	e7f9      	b.n	80038a4 <memset+0x4>

080038b0 <_init>:
 80038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b2:	bf00      	nop
 80038b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b6:	bc08      	pop	{r3}
 80038b8:	469e      	mov	lr, r3
 80038ba:	4770      	bx	lr

080038bc <_fini>:
 80038bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038be:	bf00      	nop
 80038c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c2:	bc08      	pop	{r3}
 80038c4:	469e      	mov	lr, r3
 80038c6:	4770      	bx	lr
